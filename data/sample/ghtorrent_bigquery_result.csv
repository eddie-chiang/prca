project_id,project_url,description,latest_commit_date,medium_term_commit_count,medium_term_distinct_author_count,medium_term_distinct_committer_count,recent_commit_count,recent_distinct_author_count,recent_distinct_committer_count,latest_pull_request_history_date,medium_term_pull_request_count,recent_pull_request_count,project_language,project_language_details_language,project_language_bytes,language_percentage,project_language_created_at,forked_from,pull_request_id,pullreq_id,intra_branch,user_id,comment_id,position,body,commit_id,created_at
10505039,https://api.github.com/repos/OpenClinica/OpenClinica,OpenClinica is the world's first commercial open source clinical trial software for Electronic Data Capture (EDC) Clinical Data Management (CDM).,2018-03-30 18:20:50 UTC,2694,30,25,376,14,11,2018-03-30 18:20:51 UTC,906,133,Java,java,17519193,88.856361386541607,2016-03-01 12:29:15 UTC,,4723215,56,false,1034239,18054141,19,Remove underscores,157932086,2014-09-25 17:29:41 UTC
10505039,https://api.github.com/repos/OpenClinica/OpenClinica,OpenClinica is the world's first commercial open source clinical trial software for Electronic Data Capture (EDC) Clinical Data Management (CDM).,2018-03-30 18:20:50 UTC,2694,30,25,376,14,11,2018-03-30 18:20:51 UTC,906,133,Java,java,17519193,88.856361386541607,2016-03-01 12:29:15 UTC,,21002082,738,false,4386270,104763417,1,"line 163 has the words ""Study Event"" hardcoded as well.  This should use the property file.",611198266,2017-03-07 19:56:20 UTC
30940386,https://api.github.com/repos/eclipse/rdf4j,RDF4J Project,2018-03-29 17:36:48 UTC,1098,26,24,45,5,6,2018-03-29 17:36:00 UTC,313,21,Java,java,8941754,96.923972097441734,2016-02-15 00:15:07 UTC,,21327610,758,false,20394,106820873,551,Use try-with-resources for this GraphQueryResult,630425039,2017-03-19 22:27:29 UTC
30940386,https://api.github.com/repos/eclipse/rdf4j,RDF4J Project,2018-03-29 17:36:48 UTC,1098,26,24,45,5,6,2018-03-29 17:36:00 UTC,313,21,Java,java,8941754,96.923972097441734,2016-02-15 00:15:07 UTC,,18242744,631,true,20394,85229672,47,"I am not familiar enough with the semantics of isHeldByCurrentThread to know whether this will work. Ie, will it return false if a lock is held but by another thread? Obtaining an exclusive lock implies to me that there should be no lock held.",542598271,2016-10-26 21:59:07 UTC
30940386,https://api.github.com/repos/eclipse/rdf4j,RDF4J Project,2018-03-29 17:36:48 UTC,1098,26,24,45,5,6,2018-03-29 17:36:00 UTC,313,21,Java,java,8941754,96.923972097441734,2016-02-15 00:15:07 UTC,,17059653,571,false,648104,78863056,342,This should probably be private or at least protected,512635283,2016-09-14 23:24:45 UTC
30940386,https://api.github.com/repos/eclipse/rdf4j,RDF4J Project,2018-03-29 17:36:48 UTC,1098,26,24,45,5,6,2018-03-29 17:36:00 UTC,313,21,Java,java,8941754,96.923972097441734,2016-02-15 00:15:07 UTC,,17445585,584,false,7714043,89170725,31,Convenience constructor for common use case.,555522662,2016-11-22 17:42:03 UTC
30940386,https://api.github.com/repos/eclipse/rdf4j,RDF4J Project,2018-03-29 17:36:48 UTC,1098,26,24,45,5,6,2018-03-29 17:36:00 UTC,313,21,Java,java,8941754,96.923972097441734,2016-02-15 00:15:07 UTC,,19125291,666,false,648104,89428839,2,wrong copyright header.,562550988,2016-11-24 02:49:02 UTC
30940386,https://api.github.com/repos/eclipse/rdf4j,RDF4J Project,2018-03-29 17:36:48 UTC,1098,26,24,45,5,6,2018-03-29 17:36:00 UTC,313,21,Java,java,8941754,96.923972097441734,2016-02-15 00:15:07 UTC,,18615733,642,false,20394,95276924,173,"This should call ```this(data, schema, DEFAULT_USE_RDFS_RULES)```, with a new constant, rather than relying on the initialiser to set it to true, given the constructors set it up in most cases.",593645145,2017-01-10 00:15:32 UTC
30940386,https://api.github.com/repos/eclipse/rdf4j,RDF4J Project,2018-03-29 17:36:48 UTC,1098,26,24,45,5,6,2018-03-29 17:36:00 UTC,313,21,Java,java,8941754,96.923972097441734,2016-02-15 00:15:07 UTC,,18242744,631,true,648104,85235292,43,I synchronized this to bring it in line with the same method in NativeSailStore. You're right though that we should probably look at the calling public methods. I'll have a closer look and adapt where necessary. ,542598271,2016-10-26 22:35:27 UTC
30940386,https://api.github.com/repos/eclipse/rdf4j,RDF4J Project,2018-03-29 17:36:48 UTC,1098,26,24,45,5,6,2018-03-29 17:36:00 UTC,313,21,Java,java,8941754,96.923972097441734,2016-02-15 00:15:07 UTC,,19414748,687,false,20394,91011251,79,"The dependentClient stuff can't be helped though, that is how we know if we should be closing it ourselves or leaving it open when it goes out of scope.",570282623,2016-12-06 04:43:32 UTC
30940386,https://api.github.com/repos/eclipse/rdf4j,RDF4J Project,2018-03-29 17:36:48 UTC,1098,26,24,45,5,6,2018-03-29 17:36:00 UTC,313,21,Java,java,8941754,96.923972097441734,2016-02-15 00:15:07 UTC,,17445585,584,false,7714043,89175671,10,"It doesn't, I just checked: https://github.com/eclipse/rdf4j/blob/master/eclipse-settings/codetemplates.xml",555522662,2016-11-22 18:07:57 UTC
30940386,https://api.github.com/repos/eclipse/rdf4j,RDF4J Project,2018-03-29 17:36:48 UTC,1098,26,24,45,5,6,2018-03-29 17:36:00 UTC,313,21,Java,java,8941754,96.923972097441734,2016-02-15 00:15:07 UTC,,19414748,687,false,648104,93342886,70,"Just to be clear the problem is not that `hasActiveOperations` can be called concurrently (that is by design), but that it inspects the list of Futures. It needs to lock access to that list to avoid concurrent threads modifying it _while it is looping ove",579593345,2016-12-20 22:52:38 UTC
30940386,https://api.github.com/repos/eclipse/rdf4j,RDF4J Project,2018-03-29 17:36:48 UTC,1098,26,24,45,5,6,2018-03-29 17:36:00 UTC,313,21,Java,java,8941754,96.923972097441734,2016-02-15 00:15:07 UTC,,18615733,642,false,20394,95280570,437,Can you reuse one of the existing Model implementations for this?,593645145,2017-01-10 00:48:01 UTC
30940386,https://api.github.com/repos/eclipse/rdf4j,RDF4J Project,2018-03-29 17:36:48 UTC,1098,26,24,45,5,6,2018-03-29 17:36:00 UTC,313,21,Java,java,8941754,96.923972097441734,2016-02-15 00:15:07 UTC,,15682407,224,false,7714043,71192955,21,I wasn't sure about whether is was desirable to couple the base class with this feature. General consensus seems to be that it would be acceptable so I'll push it up.,470893718,2016-07-18 17:39:44 UTC
30940386,https://api.github.com/repos/eclipse/rdf4j,RDF4J Project,2018-03-29 17:36:48 UTC,1098,26,24,45,5,6,2018-03-29 17:36:00 UTC,313,21,Java,java,8941754,96.923972097441734,2016-02-15 00:15:07 UTC,,14473845,47,true,20394,62133714,18,"If you want to use the basic mvn clean deploy without the release/nexus plugins you will need it, but I have never used the nexus plugin, so it may define all of that internally and you may be fine. :)",439334022,2016-05-04 23:54:03 UTC
30940386,https://api.github.com/repos/eclipse/rdf4j,RDF4J Project,2018-03-29 17:36:48 UTC,1098,26,24,45,5,6,2018-03-29 17:36:00 UTC,313,21,Java,java,8941754,96.923972097441734,2016-02-15 00:15:07 UTC,,17612944,595,true,20394,82328468,13,What obstacles are there to having this take EvaluationStrategy instead of a specific implementation?,525274907,2016-10-07 04:47:13 UTC
76384,https://api.github.com/repos/stripe/stripe-java,Stripe Java bindings,2018-03-30 18:53:55 UTC,855,46,45,166,10,10,2018-03-30 16:33:48 UTC,174,41,Java,java,534574,100,2016-10-13 10:14:15 UTC,,36060041,462,true,31982380,178269137,13,"I'm fine with adding a new helper method in `APIResource` for this, but we should ensure its usage is consistent. Obviously that shouldn't fall on you, but can you just add a ""TODO"" comment to update other model classes with subresources to use this metho",960669408,2018-03-30 10:19:05 UTC
76384,https://api.github.com/repos/stripe/stripe-java,Stripe Java bindings,2018-03-30 18:53:55 UTC,855,46,45,166,10,10,2018-03-30 16:33:48 UTC,174,41,Java,java,534574,100,2016-10-13 10:14:15 UTC,,30379765,417,true,32041691,147170181,9,"Would you mind giving this a slightly more specific name and adding a doc block explaining roughly what it does to the class? I think that ""type data deserializer"" is just a little too generic given that this is all related to sources.    Sorry definitely",819313926,2017-10-26 15:00:27 UTC
76384,https://api.github.com/repos/stripe/stripe-java,Stripe Java bindings,2018-03-30 18:53:55 UTC,855,46,45,166,10,10,2018-03-30 16:33:48 UTC,174,41,Java,java,534574,100,2016-10-13 10:14:15 UTC,,23400333,365,false,32041691,114221447,29,"Okay, can't hurt.",672943536,2017-05-01 23:14:36 UTC
76384,https://api.github.com/repos/stripe/stripe-java,Stripe Java bindings,2018-03-30 18:53:55 UTC,855,46,45,166,10,10,2018-03-30 16:33:48 UTC,174,41,Java,java,534574,100,2016-10-13 10:14:15 UTC,,25273543,374,true,32015086,118389056,4,Update: that test doesn't even support the old `user_id` key so I guess we're good though testing it explicitly might be worth it.,709684184,2017-05-24 23:33:39 UTC
76384,https://api.github.com/repos/stripe/stripe-java,Stripe Java bindings,2018-03-30 18:53:55 UTC,855,46,45,166,10,10,2018-03-30 16:33:48 UTC,174,41,Java,java,534574,100,2016-10-13 10:14:15 UTC,,23400333,365,false,1025662,112307096,71,See my comment above on why expandable fields would not work in this case.,672943536,2017-04-19 20:35:07 UTC
76384,https://api.github.com/repos/stripe/stripe-java,Stripe Java bindings,2018-03-30 18:53:55 UTC,855,46,45,166,10,10,2018-03-30 16:33:48 UTC,174,41,Java,java,534574,100,2016-10-13 10:14:15 UTC,,37141770,487,true,32041691,178311453,6,And same question here.,961227760,2018-03-30 15:26:01 UTC
76384,https://api.github.com/repos/stripe/stripe-java,Stripe Java bindings,2018-03-30 18:53:55 UTC,855,46,45,166,10,10,2018-03-30 16:33:48 UTC,174,41,Java,java,534574,100,2016-10-13 10:14:15 UTC,,35204953,452,true,31982380,177815449,21,I don't think it's necessary to check the value of every field (especially if you're using stripe-mock instead of an embedded fixture file). Mostly what we're testing here is that `fromJson` does not raise an exception.    In the other deserialization tes,959272755,2018-03-28 16:46:33 UTC
76384,https://api.github.com/repos/stripe/stripe-java,Stripe Java bindings,2018-03-30 18:53:55 UTC,855,46,45,166,10,10,2018-03-30 16:33:48 UTC,174,41,Java,java,534574,100,2016-10-13 10:14:15 UTC,,35204953,452,true,31982380,177812438,110,Rename to `testReject()`,959272755,2018-03-28 16:36:14 UTC
76384,https://api.github.com/repos/stripe/stripe-java,Stripe Java bindings,2018-03-30 18:53:55 UTC,855,46,45,166,10,10,2018-03-30 16:33:48 UTC,174,41,Java,java,534574,100,2016-10-13 10:14:15 UTC,,16719659,309,true,7942,77237022,5,"@dukehoops By default these fields get a modifier called ""package-private"" which means that they can only be used internally to the package. It's true that private might be a little better, but at least we aren't leaking an API. ",503836379,2016-09-01 19:21:06 UTC
76384,https://api.github.com/repos/stripe/stripe-java,Stripe Java bindings,2018-03-30 18:53:55 UTC,855,46,45,166,10,10,2018-03-30 16:33:48 UTC,174,41,Java,java,534574,100,2016-10-13 10:14:15 UTC,,5595882,130,true,128223,22009625,294,nit: normal in method names only makes sense with respect to multipart. You can probably remove it or indicate how it's different than multipart.    a. `getStripeResponse`  b. `getSinglePartStripeResponse`    are both fine,196226418,2014-12-17 21:22:05 UTC
76384,https://api.github.com/repos/stripe/stripe-java,Stripe Java bindings,2018-03-30 18:53:55 UTC,855,46,45,166,10,10,2018-03-30 16:33:48 UTC,174,41,Java,java,534574,100,2016-10-13 10:14:15 UTC,,6694219,149,true,128223,26638594,65,AssertNull,231658517,2015-03-18 04:10:14 UTC
76384,https://api.github.com/repos/stripe/stripe-java,Stripe Java bindings,2018-03-30 18:53:55 UTC,855,46,45,166,10,10,2018-03-30 16:33:48 UTC,174,41,Java,java,534574,100,2016-10-13 10:14:15 UTC,,7361740,166,true,373987,29540697,16,How about a comment here describing what this is / why it is?,252162623,2015-05-01 21:20:28 UTC
76384,https://api.github.com/repos/stripe/stripe-java,Stripe Java bindings,2018-03-30 18:53:55 UTC,855,46,45,166,10,10,2018-03-30 16:33:48 UTC,174,41,Java,java,534574,100,2016-10-13 10:14:15 UTC,,16769652,311,true,7942,77834466,17,Committed a small patch in ad217ff to give these getter/setters a little more breathing room.,505863596,2016-09-07 14:36:22 UTC
76384,https://api.github.com/repos/stripe/stripe-java,Stripe Java bindings,2018-03-30 18:53:55 UTC,855,46,45,166,10,10,2018-03-30 16:33:48 UTC,174,41,Java,java,534574,100,2016-10-13 10:14:15 UTC,,25273543,374,true,32041691,120739474,4,"Alright, I updated the fixture in 304fc78.",709684184,2017-06-07 20:43:37 UTC
76384,https://api.github.com/repos/stripe/stripe-java,Stripe Java bindings,2018-03-30 18:53:55 UTC,855,46,45,166,10,10,2018-03-30 16:33:48 UTC,174,41,Java,java,534574,100,2016-10-13 10:14:15 UTC,,18450942,330,true,32041691,86189947,4,"Hah, sorry for the nit, but just check leading whitespace here again (tabs).",547087598,2016-11-02 16:54:52 UTC
76384,https://api.github.com/repos/stripe/stripe-java,Stripe Java bindings,2018-03-30 18:53:55 UTC,855,46,45,166,10,10,2018-03-30 16:33:48 UTC,174,41,Java,java,534574,100,2016-10-13 10:14:15 UTC,,35231919,453,true,32041691,169504053,37,"Nit, but can we use `tu_123` instead? It's a convention that's at least starting to be established.",922927518,2018-02-21 00:28:18 UTC
76384,https://api.github.com/repos/stripe/stripe-java,Stripe Java bindings,2018-03-30 18:53:55 UTC,855,46,45,166,10,10,2018-03-30 16:33:48 UTC,174,41,Java,java,534574,100,2016-10-13 10:14:15 UTC,,9816476,228,true,7942,42155575,18,Yep! Done in 46af413.,330012266,2015-10-15 15:42:19 UTC
76384,https://api.github.com/repos/stripe/stripe-java,Stripe Java bindings,2018-03-30 18:53:55 UTC,855,46,45,166,10,10,2018-03-30 16:33:48 UTC,174,41,Java,java,534574,100,2016-10-13 10:14:15 UTC,,5595882,130,true,128223,22009852,118,Please check & throw an explicit exception for nullity,196226418,2014-12-17 21:25:19 UTC
76384,https://api.github.com/repos/stripe/stripe-java,Stripe Java bindings,2018-03-30 18:53:55 UTC,855,46,45,166,10,10,2018-03-30 16:33:48 UTC,174,41,Java,java,534574,100,2016-10-13 10:14:15 UTC,,13963563,283,true,7942,60063487,26,"Just in the interest of convention, would you mind adding setters for these as well? (e.g. `setAlipayAccount`) They won't be used in any production paths, but could be useful for testing and such.",427663554,2016-04-18 14:05:05 UTC
76384,https://api.github.com/repos/stripe/stripe-java,Stripe Java bindings,2018-03-30 18:53:55 UTC,855,46,45,166,10,10,2018-03-30 16:33:48 UTC,174,41,Java,java,534574,100,2016-10-13 10:14:15 UTC,,21389423,346,true,34112337,101568567,24,Same.,619397286,2017-02-16 16:48:12 UTC
76384,https://api.github.com/repos/stripe/stripe-java,Stripe Java bindings,2018-03-30 18:53:55 UTC,855,46,45,166,10,10,2018-03-30 16:33:48 UTC,174,41,Java,java,534574,100,2016-10-13 10:14:15 UTC,,8918114,206,false,918752,37562564,26,"yes, the default impl is returning a null PasswordAuthentication. and i've verified.  ```  scala> import java.net._  import java.net._  scala> import com.stripe._  import com.stripe._  scala> import com.stripe.model._  import com.stripe.model._  scala> va",299344387,2015-08-20 16:15:52 UTC
76384,https://api.github.com/repos/stripe/stripe-java,Stripe Java bindings,2018-03-30 18:53:55 UTC,855,46,45,166,10,10,2018-03-30 16:33:48 UTC,174,41,Java,java,534574,100,2016-10-13 10:14:15 UTC,,25467252,382,true,32041691,122030777,111,"So I think it's convention to have all models (even submodels) at the top level of the `model` package (for example, `EventData` and `ChargeOutcomeRule`). Just to keep inline with that pattern, I think we should rename this to something like `EphemeralKey",714115760,2017-06-14 18:37:24 UTC
76384,https://api.github.com/repos/stripe/stripe-java,Stripe Java bindings,2018-03-30 18:53:55 UTC,855,46,45,166,10,10,2018-03-30 16:33:48 UTC,174,41,Java,java,534574,100,2016-10-13 10:14:15 UTC,,18312166,328,true,7942,85590216,30,"And similarly here. e.g. ""Check if the JSON data is an object. If it is, it's an indication that the field has been expanded in the response.""",543959005,2016-10-28 18:53:31 UTC
76384,https://api.github.com/repos/stripe/stripe-java,Stripe Java bindings,2018-03-30 18:53:55 UTC,855,46,45,166,10,10,2018-03-30 16:33:48 UTC,174,41,Java,java,534574,100,2016-10-13 10:14:15 UTC,,2777046,55,true,373987,8808910,4,our currencies are lowercase,80785261,2014-01-11 04:18:42 UTC
76384,https://api.github.com/repos/stripe/stripe-java,Stripe Java bindings,2018-03-30 18:53:55 UTC,855,46,45,166,10,10,2018-03-30 16:33:48 UTC,174,41,Java,java,534574,100,2016-10-13 10:14:15 UTC,,5595882,130,true,128223,22009413,20,"It looks like you're not modifying these lines.     To add a file by hunk, use git interactive mode (`git add -p`)",196226418,2014-12-17 21:18:45 UTC
76384,https://api.github.com/repos/stripe/stripe-java,Stripe Java bindings,2018-03-30 18:53:55 UTC,855,46,45,166,10,10,2018-03-30 16:33:48 UTC,174,41,Java,java,534574,100,2016-10-13 10:14:15 UTC,,21389423,346,true,34112337,101567576,35,"Assertion order reversed on both of these assertions. Should be `assertEquals(expect, actual)` http://junit.sourceforge.net/javadoc/org/junit/Assert.html#assertEquals(java.lang.Object, java.lang.Object)",619397286,2017-02-16 16:44:21 UTC
76384,https://api.github.com/repos/stripe/stripe-java,Stripe Java bindings,2018-03-30 18:53:55 UTC,855,46,45,166,10,10,2018-03-30 16:33:48 UTC,174,41,Java,java,534574,100,2016-10-13 10:14:15 UTC,,5595882,130,true,128223,22010474,35,"Can you implement hashCode && equals on the `FileUpload` class, then:    1. Remove URL and any other dynamic fields - check that they match a regex.  2. call `assertEquals` on the two `FileUpload` objects",196226418,2014-12-17 21:33:29 UTC
76384,https://api.github.com/repos/stripe/stripe-java,Stripe Java bindings,2018-03-30 18:53:55 UTC,855,46,45,166,10,10,2018-03-30 16:33:48 UTC,174,41,Java,java,534574,100,2016-10-13 10:14:15 UTC,,5595882,130,true,128223,22009794,5,"Per IRL, I meant to say `uploadApiBase`. This is fine too, but unrelated.",196226418,2014-12-17 21:24:29 UTC
76384,https://api.github.com/repos/stripe/stripe-java,Stripe Java bindings,2018-03-30 18:53:55 UTC,855,46,45,166,10,10,2018-03-30 16:33:48 UTC,174,41,Java,java,534574,100,2016-10-13 10:14:15 UTC,,5595882,130,true,128223,22009759,121,"> ""Empty Stripe apiBase specified!""",196226418,2014-12-17 21:24:02 UTC
76384,https://api.github.com/repos/stripe/stripe-java,Stripe Java bindings,2018-03-30 18:53:55 UTC,855,46,45,166,10,10,2018-03-30 16:33:48 UTC,174,41,Java,java,534574,100,2016-10-13 10:14:15 UTC,,35231919,453,true,41385502,169456620,10,I think the convention from some of @jkakar-stripe PRs has been to alphabetize these but leave `id` and `object` on top?,922822677,2018-02-20 20:57:22 UTC
37843,https://api.github.com/repos/DSpace/DSpace,(Official) The DSpace digital asset management system that powers your Institutional Repository,2018-03-30 18:29:18 UTC,2305,98,87,214,20,16,2018-03-30 18:29:21 UTC,888,126,Java,java,14435902,83.163240998811361,2016-10-11 22:32:42 UTC,,691127,101,false,146836,1853990,13,"@KevinVdV, one minor comment.    I'm assuming that we should also remove the ""VersionHistoryForm.title"" and ""VersionHistoryForm.trail"" from the corresponding i18n messages.xml file?   https://github.com/DSpace/DSpace/blob/master/dspace-xmlui/src/main/weba",18495681,2012-10-16 11:48:59 UTC
37843,https://api.github.com/repos/DSpace/DSpace,(Official) The DSpace digital asset management system that powers your Institutional Repository,2018-03-30 18:29:18 UTC,2305,98,87,214,20,16,2018-03-30 18:29:21 UTC,888,126,Java,java,14435902,83.163240998811361,2016-10-11 22:32:42 UTC,,23384581,1707,false,75315,113958301,125,Is all this just to avoid mocking up an HttpServletRequest?,680690656,2017-04-28 15:34:19 UTC
37843,https://api.github.com/repos/DSpace/DSpace,(Official) The DSpace digital asset management system that powers your Institutional Repository,2018-03-30 18:29:18 UTC,2305,98,87,214,20,16,2018-03-30 18:29:21 UTC,888,126,Java,java,14435902,83.163240998811361,2016-10-11 22:32:42 UTC,,6581083,884,false,5457573,26036860,47,I think that is still a problem with error ORA-00932 (direct compare CLOB and string - see above TODO comment) for oracle db. ,227866736,2015-03-09 13:00:14 UTC
37843,https://api.github.com/repos/DSpace/DSpace,(Official) The DSpace digital asset management system that powers your Institutional Repository,2018-03-30 18:29:18 UTC,2305,98,87,214,20,16,2018-03-30 18:29:21 UTC,888,126,Java,java,14435902,83.163240998811361,2016-10-11 22:32:42 UTC,,2463103,395,false,271753,7875789,43,I really wan't to avoid such code in jsp files. Please move the retrieve logic (line 49) to the step class and just retrieve the list from a request attribute,71336360,2013-11-23 13:58:11 UTC
37843,https://api.github.com/repos/DSpace/DSpace,(Official) The DSpace digital asset management system that powers your Institutional Repository,2018-03-30 18:29:18 UTC,2305,98,87,214,20,16,2018-03-30 18:29:21 UTC,888,126,Java,java,14435902,83.163240998811361,2016-10-11 22:32:42 UTC,,2463103,395,false,3841,7881181,50,Maybe in the case of simple embargo (the focus is the submitter so I think that the submitter want to know if you have already setted the embargo or not) the review step for bitstream section shouldn't show any information about policies settings (because,71336360,2013-11-24 23:33:31 UTC
37843,https://api.github.com/repos/DSpace/DSpace,(Official) The DSpace digital asset management system that powers your Institutional Repository,2018-03-30 18:29:18 UTC,2305,98,87,214,20,16,2018-03-30 18:29:21 UTC,888,126,Java,java,14435902,83.163240998811361,2016-10-11 22:32:42 UTC,,34053127,1931,false,146836,163933346,22,"In several places in the PR, it looks like you replace `ListUtils` with `Collections`, but leave the `import org.apache.commons.collections4.ListUtils` in place?  Is this on purpose, or should the `import` simply be removed here?",898554683,2018-01-25 18:47:52 UTC
37843,https://api.github.com/repos/DSpace/DSpace,(Official) The DSpace digital asset management system that powers your Institutional Repository,2018-03-30 18:29:18 UTC,2305,98,87,214,20,16,2018-03-30 18:29:21 UTC,888,126,Java,java,14435902,83.163240998811361,2016-10-11 22:32:42 UTC,,2463103,395,false,271753,7875799,8,is there any reason to put this information in the submission info object instead of use a standard request attribute?,71336360,2013-11-23 14:03:34 UTC
37843,https://api.github.com/repos/DSpace/DSpace,(Official) The DSpace digital asset management system that powers your Institutional Repository,2018-03-30 18:29:18 UTC,2305,98,87,214,20,16,2018-03-30 18:29:21 UTC,888,126,Java,java,14435902,83.163240998811361,2016-10-11 22:32:42 UTC,,29171942,1852,false,9348262,146594658,79,"If it is always 1, do we still need this method/class?",815982514,2017-10-24 15:15:45 UTC
37843,https://api.github.com/repos/DSpace/DSpace,(Official) The DSpace digital asset management system that powers your Institutional Repository,2018-03-30 18:29:18 UTC,2305,98,87,214,20,16,2018-03-30 18:29:21 UTC,888,126,Java,java,14435902,83.163240998811361,2016-10-11 22:32:42 UTC,,16811525,1509,false,271753,78824047,5,Not sure but the use of handle_id here looks strange to me.  I have also found this post on stackoverflow  http://stackoverflow.com/questions/27345133/use-column-name-instead-of-entity-property-in-jpql,491776171,2016-09-14 19:45:10 UTC
37843,https://api.github.com/repos/DSpace/DSpace,(Official) The DSpace digital asset management system that powers your Institutional Repository,2018-03-30 18:29:18 UTC,2305,98,87,214,20,16,2018-03-30 18:29:21 UTC,888,126,Java,java,14435902,83.163240998811361,2016-10-11 22:32:42 UTC,,266506,75,false,31455,1468943,30,"Apologies for not having time to go verify this on my own at the moment, but while I'm thinking about it, is the checking to make sure this group isn't assigned elsewhere in the repository done inside Group.delete()?",7407259,2012-08-27 19:26:36 UTC
37843,https://api.github.com/repos/DSpace/DSpace,(Official) The DSpace digital asset management system that powers your Institutional Repository,2018-03-30 18:29:18 UTC,2305,98,87,214,20,16,2018-03-30 18:29:21 UTC,888,126,Java,java,14435902,83.163240998811361,2016-10-11 22:32:42 UTC,,2361326,372,false,283631,7343773,23,I just tried this out and e.getMessage returned null. ,68093214,2013-10-31 13:57:53 UTC
37843,https://api.github.com/repos/DSpace/DSpace,(Official) The DSpace digital asset management system that powers your Institutional Repository,2018-03-30 18:29:18 UTC,2305,98,87,214,20,16,2018-03-30 18:29:21 UTC,888,126,Java,java,14435902,83.163240998811361,2016-10-11 22:32:42 UTC,,34008065,1929,false,9348262,164707238,129,I think that if-tests `if (idx == to && to<from)` and `if (idx == to && to>from)` can be collapsed to `if (idx == to)` because the code inside the if-test is the same.,902774829,2018-01-30 11:02:12 UTC
37843,https://api.github.com/repos/DSpace/DSpace,(Official) The DSpace digital asset management system that powers your Institutional Repository,2018-03-30 18:29:18 UTC,2305,98,87,214,20,16,2018-03-30 18:29:21 UTC,888,126,Java,java,14435902,83.163240998811361,2016-10-11 22:32:42 UTC,,16397972,1497,false,146836,75541847,8,"Minor note... you can strip out all these comments, as they don't need to be in the code itself (and they just describe why you changed the below line).      Instead, if you want to explain this difference, you can do so in the PR description/comments.",496736119,2016-08-19 19:51:06 UTC
37843,https://api.github.com/repos/DSpace/DSpace,(Official) The DSpace digital asset management system that powers your Institutional Repository,2018-03-30 18:29:18 UTC,2305,98,87,214,20,16,2018-03-30 18:29:21 UTC,888,126,Java,java,14435902,83.163240998811361,2016-10-11 22:32:42 UTC,,9077308,1035,false,146837,38097070,7,Oooops.... this was from another change I was working on that is completely untested & has nothing to do with the removal of the BundleBItstream object. Reverted this change in a new commit.,306635224,2015-08-27 11:54:42 UTC
37843,https://api.github.com/repos/DSpace/DSpace,(Official) The DSpace digital asset management system that powers your Institutional Repository,2018-03-30 18:29:18 UTC,2305,98,87,214,20,16,2018-03-30 18:29:21 UTC,888,126,Java,java,14435902,83.163240998811361,2016-10-11 22:32:42 UTC,,6581083,884,false,5457573,26047173,47,"I agree. I tried the oracle string conversion functions for VARCHAR2, but without success. Always ended with an error ORA-00932. I think that is no way to use identical code for both DBMS, except change datatype CLOB to VARCHAR2 of column TEXT_VALUE of ta",227866736,2015-03-09 14:48:58 UTC
37843,https://api.github.com/repos/DSpace/DSpace,(Official) The DSpace digital asset management system that powers your Institutional Repository,2018-03-30 18:29:18 UTC,2305,98,87,214,20,16,2018-03-30 18:29:21 UTC,888,126,Java,java,14435902,83.163240998811361,2016-10-11 22:32:42 UTC,,12768807,1330,false,146837,55347783,50,String isn't properly closed.,400437901,2016-03-08 11:37:59 UTC
37843,https://api.github.com/repos/DSpace/DSpace,(Official) The DSpace digital asset management system that powers your Institutional Repository,2018-03-30 18:29:18 UTC,2305,98,87,214,20,16,2018-03-30 18:29:21 UTC,888,126,Java,java,14435902,83.163240998811361,2016-10-11 22:32:42 UTC,,1452185,212,false,271753,4675659,25,this should be retrieved as attribute attached to the request (set it in the servlet side),40162040,2013-06-13 07:52:12 UTC
37843,https://api.github.com/repos/DSpace/DSpace,(Official) The DSpace digital asset management system that powers your Institutional Repository,2018-03-30 18:29:18 UTC,2305,98,87,214,20,16,2018-03-30 18:29:21 UTC,888,126,Java,java,14435902,83.163240998811361,2016-10-11 22:32:42 UTC,,30706965,1881,false,9348262,154659744,121,"I think that currently we synchronise our threads a bit too much. I think this results in all REST API calls to go sequentially through this lock. Additionally, we might think about not checking Flyway for each and every REST API call. But I'll take that ",845433232,2017-12-04 14:19:53 UTC
37843,https://api.github.com/repos/DSpace/DSpace,(Official) The DSpace digital asset management system that powers your Institutional Repository,2018-03-30 18:29:18 UTC,2305,98,87,214,20,16,2018-03-30 18:29:21 UTC,888,126,Java,java,14435902,83.163240998811361,2016-10-11 22:32:42 UTC,,13462660,1344,false,146836,57953353,34,"@bram-atmire : one thing I just realized.  The configs in `local.cfg.EXAMPLE` are commented out on purpose (because the defaults all reside in dspace.cfg, and *everything* is optional in `local.cfg`).  So, this PR likely needs also change default settings",416469081,2016-03-30 19:59:49 UTC
37843,https://api.github.com/repos/DSpace/DSpace,(Official) The DSpace digital asset management system that powers your Institutional Repository,2018-03-30 18:29:18 UTC,2305,98,87,214,20,16,2018-03-30 18:29:21 UTC,888,126,Java,java,14435902,83.163240998811361,2016-10-11 22:32:42 UTC,,21687672,1653,false,578729,103271630,18,"In my hurry to recreate this PR, it looks like I merged changes incorrectly.  Thanks for catching this.",630672566,2017-02-27 18:05:11 UTC
37843,https://api.github.com/repos/DSpace/DSpace,(Official) The DSpace digital asset management system that powers your Institutional Repository,2018-03-30 18:29:18 UTC,2305,98,87,214,20,16,2018-03-30 18:29:21 UTC,888,126,Java,java,14435902,83.163240998811361,2016-10-11 22:32:42 UTC,,30372953,1873,false,271753,148113720,44,as the concept of session has been completely withdrawn (the SessionService interface was deleted) it should be better to change the method signature,823677668,2017-10-31 20:11:29 UTC
37843,https://api.github.com/repos/DSpace/DSpace,(Official) The DSpace digital asset management system that powers your Institutional Repository,2018-03-30 18:29:18 UTC,2305,98,87,214,20,16,2018-03-30 18:29:21 UTC,888,126,Java,java,14435902,83.163240998811361,2016-10-11 22:32:42 UTC,,4558336,629,false,75315,17371828,73,DatabaseManager.isOracle(),156153265,2014-09-10 14:26:07 UTC
37843,https://api.github.com/repos/DSpace/DSpace,(Official) The DSpace digital asset management system that powers your Institutional Repository,2018-03-30 18:29:18 UTC,2305,98,87,214,20,16,2018-03-30 18:29:21 UTC,888,126,Java,java,14435902,83.163240998811361,2016-10-11 22:32:42 UTC,,36397586,1985,false,146836,174799797,15,"Silly question, perhaps, but why did you choose this version?     As best as I can tell, it looks like `hibernate-validator-cdi` doesn't follow the same versioning as Hibernate ORM.  I know we use Hibernate `5.2.8.Final`, but I'm not sure that means we ne",945655468,2018-03-15 14:23:27 UTC
37843,https://api.github.com/repos/DSpace/DSpace,(Official) The DSpace digital asset management system that powers your Institutional Repository,2018-03-30 18:29:18 UTC,2305,98,87,214,20,16,2018-03-30 18:29:21 UTC,888,126,Java,java,14435902,83.163240998811361,2016-10-11 22:32:42 UTC,,23571043,1714,false,146836,111984490,10,Not sure I understand the purpose to this TODO?  Did you mean to add an `@Override` here?,672882426,2017-04-18 15:25:30 UTC
37843,https://api.github.com/repos/DSpace/DSpace,(Official) The DSpace digital asset management system that powers your Institutional Repository,2018-03-30 18:29:18 UTC,2305,98,87,214,20,16,2018-03-30 18:29:21 UTC,888,126,Java,java,14435902,83.163240998811361,2016-10-11 22:32:42 UTC,,25235405,1766,false,146836,121220451,206,"Ok, makes sense now. I didn't realize the scale of the processing time here. We should just make this clear in the documentation, and also make it clear how to set `num-rec` to ""all"" (assuming that is also possible and assuming you understand the risks of",711248472,2017-06-09 20:52:52 UTC
37843,https://api.github.com/repos/DSpace/DSpace,(Official) The DSpace digital asset management system that powers your Institutional Repository,2018-03-30 18:29:18 UTC,2305,98,87,214,20,16,2018-03-30 18:29:21 UTC,888,126,Java,java,14435902,83.163240998811361,2016-10-11 22:32:42 UTC,,18616402,1563,false,578729,123349182,49,"I validated the issue that I reported above.  When a user has ADMIN rights to both collections and communities, the location search is corrupted.    > )+OR+location:(+mfc564c62-b178-4d8b-8789-995e3e7e5377+OR+m40249564-ea3a-4bdc-86fd-21cf6b554187ld65b663c-",551291522,2017-06-21 19:52:55 UTC
37843,https://api.github.com/repos/DSpace/DSpace,(Official) The DSpace digital asset management system that powers your Institutional Repository,2018-03-30 18:29:18 UTC,2305,98,87,214,20,16,2018-03-30 18:29:21 UTC,888,126,Java,java,14435902,83.163240998811361,2016-10-11 22:32:42 UTC,,8921336,1025,false,146837,37500121,146,"I think that we will get an ""ConcurrentModificationException"" here. Because the ""BundleBitstream"" list is persisted, so when we delete an item from a list we are iterating it will alter the list.  The best way to fix this is by using an iterator:  Bitstre",299390820,2015-08-20 04:59:44 UTC
37843,https://api.github.com/repos/DSpace/DSpace,(Official) The DSpace digital asset management system that powers your Institutional Repository,2018-03-30 18:29:18 UTC,2305,98,87,214,20,16,2018-03-30 18:29:21 UTC,888,126,Java,java,14435902,83.163240998811361,2016-10-11 22:32:42 UTC,,8921336,1025,false,313997,37710908,32,"It does, thanks @KevinVdV! I've amended my pull request.",299463279,2015-08-23 19:44:33 UTC
37843,https://api.github.com/repos/DSpace/DSpace,(Official) The DSpace digital asset management system that powers your Institutional Repository,2018-03-30 18:29:18 UTC,2305,98,87,214,20,16,2018-03-30 18:29:21 UTC,888,126,Java,java,14435902,83.163240998811361,2016-10-11 22:32:42 UTC,,23042848,1694,false,1201813,113895968,136,"For a moment I thought if we would need to be able to cache authorizations for groups too. But a context is bundled to a request and that is always run by one EPerson only. Following, caching authorizations for groups wouldn't help anyone.",661332352,2017-04-28 10:08:36 UTC
37843,https://api.github.com/repos/DSpace/DSpace,(Official) The DSpace digital asset management system that powers your Institutional Repository,2018-03-30 18:29:18 UTC,2305,98,87,214,20,16,2018-03-30 18:29:21 UTC,888,126,Java,java,14435902,83.163240998811361,2016-10-11 22:32:42 UTC,,10769167,1194,false,760650,47333135,19,Still needs some handling of the context so it doesn't leak on exception.,352096110,2015-12-11 08:59:59 UTC
37843,https://api.github.com/repos/DSpace/DSpace,(Official) The DSpace digital asset management system that powers your Institutional Repository,2018-03-30 18:29:18 UTC,2305,98,87,214,20,16,2018-03-30 18:29:21 UTC,888,126,Java,java,14435902,83.163240998811361,2016-10-11 22:32:42 UTC,,5552597,801,false,199480,46430037,240,"+1 refactoring into a method, it's a good suggestion",196901531,2015-12-02 15:44:34 UTC
37843,https://api.github.com/repos/DSpace/DSpace,(Official) The DSpace digital asset management system that powers your Institutional Repository,2018-03-30 18:29:18 UTC,2305,98,87,214,20,16,2018-03-30 18:29:21 UTC,888,126,Java,java,14435902,83.163240998811361,2016-10-11 22:32:42 UTC,,5781444,820,false,146836,22733399,1,"@mhwood - I do agree with this in concept. Unfortunately though, our existing Test Framework doesn't seem to support this. Simply renaming the class to ""DSpaceAIPDisseminateIngestIT"" seems to cause it to be entirely ignored so it never gets executed.    S",203830998,2015-01-09 17:32:38 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,19706165,2513,false,5551325,92240902,94,no need for this.  It should be implicit.,575297378,2016-12-13 19:00:54 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,9118649,961,false,6773014,38795166,45,should throw if null,307025093,2015-09-04 19:19:42 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,15799952,2052,false,5551325,71196345,22,I thought the purpose was to make sure `write` was called on the proper thread.  Is that not the primary purpose?,478208129,2016-07-18 17:58:20 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,22478073,2839,false,1014305,107783176,96,Make the GET asciistring a constant.,647816079,2017-03-23 21:02:15 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,33892801,3988,false,1014305,163372933,3,"That should normally be user-specific, not something that comes from the repository. So we'll want to do something different.",895874446,2018-01-23 20:51:43 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,32144857,3839,false,2489413,155638247,157,"I don't get it. More than one stream can have this set to true, yes, but only one of them can commit successfully, how would it cause us to call closed() more than once?",857895056,2017-12-07 20:55:57 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,7313324,349,false,7000520,29289609,22,Done.,250694993,2015-04-28 19:16:39 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,19693327,2526,false,2489413,92907196,18,move `getAttributes()` into one of negotiatorHandler's methods instead,575159265,2016-12-17 00:16:14 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,29661713,3568,false,6634728,143885759,138,ditto,804614509,2017-10-11 00:17:55 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,25399954,3086,false,5551325,128887981,54,"Another alternative would be to nest the `MethodDescriptorSupplier`  class as an inner class of the `FileDescriptorSupplier` class, and let it capture the fields and methods.",719404301,2017-07-22 03:19:36 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,7594214,446,false,3664876,30624374,4,@vjpai could you take a look at my changes to this proto file?,260141281,2015-05-19 15:31:09 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,8388600,623,false,1014305,35015011,139,"Can you move the variant construction, rawFrameWriter assignment, setFrameWriter, and executor.execute lines out of the synchronized block? It appears that none of those need to be done while holding the lock, and it makes it less obvious what constraints",280207184,2015-07-20 14:37:41 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,19709543,2530,false,6634728,94189315,597,You are right. I never thought of the race between termination and `ClientCall.start()`. I have reverted to the preexisting state and captured this case in #1981 ,586460237,2016-12-29 22:52:23 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,7594214,446,false,1014305,30659936,296,Could we still implement this in the server? It doesn't seem good for the primary implementation of the server to be in the Util class and not in the server class.,260230596,2015-05-19 21:47:28 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,19382692,2479,false,6634728,92910399,217,You would also need to verify each picker has the right subchannels and status.,575292520,2016-12-17 01:10:06 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,11733297,1331,false,1014305,50754002,69,"This could probably just be a try-finally with `promise.setSuccess()`, right? That seems like it would ease the future handling here. I'm also uneasy about throwing the exception when the stream has already been closed.",378541606,2016-01-25 20:52:55 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,9699890,1100,false,7000520,41934948,11,The TODO above needs update.,322087511,2015-10-13 20:30:23 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,13893362,1677,false,6634728,60493681,204,This function is the same as the last one except for the descriptor type. Can it be a template just like `GrpcGetDocLinesForDescriptor()`?,430630149,2016-04-20 21:46:51 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,9082774,892,false,3664876,38235264,107,ok,306715755,2015-08-28 17:28:54 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,7713596,491,false,1014305,31165014,19,"This list is mutable, so it shouldn't be in all caps.    Better would be wrap it with collections.unmodifiablelist",263344969,2015-05-27 16:29:04 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,7263220,338,false,3664876,29090700,5,Would it make sense to have `allocate(0)` behave the same way as `empty`?,249258454,2015-04-24 20:20:29 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,7263220,338,false,6773014,29094781,26,Done. Isn't checkstyle supposed to pick that up :/,249258454,2015-04-24 22:00:36 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,12736343,1506,false,3402699,54909440,32,Is it guaranteed that the channel is setup and TLS handshake has completed before a stream can be created?,399758872,2016-03-03 16:54:27 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,15988840,2126,false,5551325,75358270,126,remove printlin,495503914,2016-08-18 18:05:20 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,35931931,4174,false,2667165,176577160,272,"Changed to byte[], this also made it easier to implement a custom InputStream that extends ByteArrayInputStream.",940630739,2018-03-22 21:25:58 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,25196498,3064,false,6634728,121230628,76,"Per offline discussion, the deadlock issue with in-process transport is legit, while not the fault of this PR. I have filed #3084    However, even without #3084, using `synchronized` to make thread-safe calls to `ServerCall` and `ClientCall` is still pron",709678558,2017-06-09 21:58:47 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,24658694,3019,false,2489413,122853543,69,done,713281772,2017-06-20 00:01:21 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,26959707,3289,false,5551325,129977509,19,I think this should be moved off.   It's weird to inherit `ATTR_SECURITY_LEVEL` if you implement CallCredentials.  ,747056500,2017-07-27 22:46:51 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,16887760,2238,false,5551325,78416121,160,I put a comment saying that this is url encoded.  I think this line is the only thing shared between this function and the one below it.,509294533,2016-09-12 17:27:40 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,18908780,2427,false,6634728,88576501,159,Done.,558547519,2016-11-18 00:14:44 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,15588077,1977,false,6174876,68612973,36,make these package private?,470198737,2016-06-27 16:49:55 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,22810891,2858,false,1014305,108469246,165,This isn't protected against exceptions other than RuntimeException. It seems we would want it to deal with others.,656353557,2017-03-28 16:25:17 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,21070008,2704,false,5551325,99713135,17,"This file is not particularly good about following the rule, but line continuation should be +4.  ",612481851,2017-02-06 23:37:30 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,15886121,2089,false,1014305,72168419,321,Shouldn't this be put on the UI?,482532263,2016-07-26 00:13:35 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,30722719,3656,false,2489413,148808448,182,uh... I take it back. It is subtle even in normal retry case.,825960534,2017-11-03 15:07:25 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,7543487,432,false,3664876,30358269,109,Ok ... I've changed to returning the buffering handler.,258199607,2015-05-14 18:17:53 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,16887760,2238,false,6174876,78446249,47,nit: there are two spaces between `marshaller.  Both`,511376879,2016-09-12 20:17:25 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,17034642,2262,false,6634728,81800478,40,Done.,521351028,2016-10-04 16:42:41 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,13707261,1649,false,9209972,59063680,4,"Ah, missed it. Thanks, added.",421631572,2016-04-08 17:49:36 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,17034642,2262,false,120104,78691826,74,"style, but I sometimes use maybeGetMetric when result is nullable",512070930,2016-09-14 06:24:18 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,25708644,3119,false,24254,123337497,142,Fixed,719493583,2017-06-21 18:59:31 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,13677408,1642,false,1014305,58916041,121,"I'd feel better if we asserted i == storeCount * 2 at the end, for better detection of bugs.",420798151,2016-04-07 17:56:21 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,30978355,3695,false,1014305,149837211,37,"What happens if you don't use a set? (say, a list instead?)",831609260,2017-11-09 00:24:55 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,12736343,1506,false,1014305,56261408,31,"This class is in `internal`. We are free to change it on a whim. I'm fine with not changing the other call-sites in this PR, though. There are only a couple of users of it: `ClientCallImpl`, `ServerImpl`, and a (very hacky) test.",407225654,2016-03-15 23:50:48 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,13677408,1642,false,6174876,58914129,29,`numHeaders`?,420798151,2016-04-07 17:44:56 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,8586229,672,false,1014305,35890547,14,private?,284286363,2015-07-30 14:33:23 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,16103160,2140,false,5551325,78249766,85,should this be final?,509379924,2016-09-09 21:10:53 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,8745738,697,false,3664876,36659267,35,Should we also initiate graceful shutdown if we haven't already?,292937036,2015-08-10 15:31:02 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,24658694,3019,false,2489413,118114592,61,"yes, one possibility is the application thread calling `notifyWhenStateChanged`, the other is the transport thread calling `updateChannelState`. Anyway, this Queue implementation was abandoned in favor of ArrayList. ",696267481,2017-05-23 21:45:28 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,14648422,1817,false,7147247,67078023,123,Is Android still the correct class name to use now?,464422624,2016-06-14 23:44:59 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,32634924,3879,false,2667165,159011378,32,Done,868161597,2017-12-28 23:35:07 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,35402144,4136,false,3695855,174298496,20,Done,925857754,2018-03-13 21:59:35 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,35931931,4174,false,1014305,176532558,272,"Well, right now it is private code, so it seems it'd be premature for the current implementation (the earlier iteration looked different).",940630739,2018-03-22 18:44:59 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,22925014,2863,false,1014305,110271634,366,`ForwardingClientCall.SimpleForwardingClientCall`?,658767914,2017-04-06 21:25:55 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,12233655,1409,false,5551325,52616060,15,"MetadataEntry is a private class, you won't be able to access it at all.    Also, ImmutableMap is too specific of a return value.  It should be a Map in any case.",388003541,2016-02-11 15:28:46 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,9426544,1048,false,1014305,42295926,53,Rename to Factory and then rename Handle to LoadBalancer? Could rename start to newLoadBalancer.,331834068,2015-10-16 20:14:21 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,16700982,2223,false,5551325,78056253,41,This probably needs a more thorough explanation of what safety means.,509194099,2016-09-08 17:53:11 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,9442940,1072,false,6634728,40451011,193,Removed the last sentence.,315897922,2015-09-25 14:57:13 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,25944867,3145,false,1014305,127883506,67,"Previously the code notified the application immediately, right? Why isn't this `true`?",724578548,2017-07-18 05:09:29 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,25944867,3145,false,1014305,128863755,129,It being missed on clients is an oversight (probably lost in an earlier refactoring). I've filed https://github.com/grpc/grpc-java/issues/3264,724578548,2017-07-21 21:20:31 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,13679378,1641,false,5551325,59053620,107,"Make the Charset a constant, so you can reuse it below.",421630517,2016-04-08 16:39:15 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,16017796,2137,false,1014305,73908731,266,"I wouldn't try to remove `inUseStateAggregator`. I don't see much gain to be had there. Instead, I'd focus on making `exitIdleMode` able to avoid the lock in heavy-use scenarios, i.e., when it doesn't need to do anything because the channel is already in-",487325932,2016-08-08 16:38:12 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,33132617,3915,false,5551325,159747261,10,"Can't put it here, it would be public.",880021396,2018-01-04 20:25:55 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,6647549,197,false,1014305,26390718,45,"IndexOutOfBoundsException seems more appropriate. As a second choice, IllegalArgumentException could have worked better than RuntimeException.",229419033,2015-03-13 13:44:13 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,32144857,3839,false,1014305,155614509,63,"This looks racy, since these are updated independently. It looks like it'd be very hard to fix without a lock.",857895056,2017-12-07 19:16:45 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,7564398,443,false,1014305,30536642,86,Same as above. Should be an else.,259685004,2015-05-18 16:52:14 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,32933532,3904,false,2489413,160263680,4,One option may be: keep your code and add   ```java  activeTransport = null;  pendingTransport = null;  addressIndex = 0;  ```     after  ```java  savedActiveTransport = activeTransport;  savedPendingTransport = pendingTransport;  ```    Another option: c,875433602,2018-01-08 21:43:00 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,8324415,819,false,3664876,37122779,13,Weird ... I swear I deleted this in another PR.  Possibly one I haven't submitted yet?,279328450,2015-08-14 19:48:38 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,33807978,3986,false,1014305,164898137,52,"Pass a string as well: `checkNotNull(retryPolicy, ""retryPolicy"")`    That string (any semi-unique string) is really helpful when the NPE occurs, as you no longer need to trust the line number.",903129972,2018-01-30 22:24:11 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,12108322,1395,false,1014305,52415441,234,If `shutdown == true` and `pendingStreams.isEmpty()` then `pendingStreams = null` and notify listener about termination.,385140903,2016-02-10 05:14:04 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,13638091,1634,false,9209972,58939951,2,Updated.,420812766,2016-04-07 20:34:01 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,13638091,1634,false,9209972,58760061,8,I just left this one up for PR debate and have no opinions. Should I just remove this restriction then?,420299347,2016-04-06 18:45:15 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,9442940,1072,false,6634728,40451532,262,Changed to call `Thread.currentThread().interrupt()` if it's `InterruptedException`.,315897922,2015-09-25 15:02:10 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,14676761,1821,false,6634728,63441376,83,Better to note that further health check requests to this service will be responded with NOT_FOUND error.,446918642,2016-05-16 23:08:47 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,19709543,2530,false,6634728,93151713,759,"No we can't, because the helper is not accessible here.  We can, however, use `runSerialized` in place of `channelExecutor.executeLater()` in `LbHelperImpl`.",575340166,2016-12-20 00:44:27 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,22181058,2810,false,6634728,105517379,1,Add a notice here to say that the implementations are in the works and don't try to use it yet.,641587759,2017-03-11 00:43:08 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,16333754,2171,false,5500733,75160100,11,Suggest moving this tag above the comment above.  ,494765137,2016-08-17 16:44:05 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,28458358,3452,false,5551325,138173982,180,"Actually, after investigating further, you are right.  I have included a best effort mechanism to log to the console in the event of shutdown.    ",779224081,2017-09-11 19:55:03 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,18311973,2386,false,5551325,88361751,48,"Optional, but I would have picked LinkedHashMap.  Requiring that they be sorted is asking a lot.  Just being consistent is good enough.",553811585,2016-11-17 00:18:33 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,7955256,530,false,1014305,33398757,291,Discussed offline. It's because we have our own assertEquals for MessageNano.,275415089,2015-06-26 19:44:27 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,32358934,3861,false,6634728,156539299,28,Please document that all fields are nullable.,862297342,2017-12-13 00:55:32 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,16842829,2235,false,5551325,77733643,385,"I can't imagine this getting executed often, but I would hope that pointer equality would be the preferred way of checking.",507785185,2016-09-06 22:54:12 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,8745738,697,false,3664876,36658591,31,"Just so I understand what you're trying to do here ... this is to capture any non HTTP/2 errors in the pipeline? In particular, startup-related errors I'm guessing?",292937036,2015-08-10 15:26:09 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,17034642,2262,false,120104,78692014,83,"heh it will fail :) with NPE. there's some logic here that could use a comment, too",512070930,2016-09-14 06:25:32 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,8897968,822,false,1014305,37648993,6,Remove authority here?,299424082,2015-08-21 14:01:27 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,32634924,3879,false,5551325,159566225,38,"These shouldn't be captures, but `<?, ?>`",868161597,2018-01-04 01:27:08 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,30767746,3663,false,5551325,149181229,88,Done,829132218,2017-11-06 19:39:45 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,9443130,1058,false,1014305,40480966,8,Make this class package-private.,315961653,2015-09-25 20:15:28 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,7564203,442,false,1014305,30540977,6,I don't like the idea of us throwing an exception like this. The approach in #443 is much better.,259369858,2015-05-18 17:49:32 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,13679378,1641,false,5551325,59048401,228,Any reason to not just let the exception bubble up?  It's in the throws declaration of the method sig.,421630517,2016-04-08 16:05:19 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,7955256,530,false,7000520,33314935,278,Done.,274348435,2015-06-25 21:08:38 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,14582820,1813,false,5551325,63405022,13,Done.,446947278,2016-05-16 18:53:28 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,15616315,1989,false,5551325,68789268,90,no need for `eq` if all the arguments are exact. ,470590070,2016-06-28 16:12:21 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,32933532,3904,false,3695855,160209029,4,The current API assumes that `InternalSubchannel.shutdown()` only occurs when the LB has discarded the subchannel or the managed channel itself is shutting down. See the Javadoc on `io.grpc.LoadBalancer#handleSubchannelState`. `InternalSubchannel.shutdown,875433602,2018-01-08 17:46:06 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,18707417,2416,false,7302811,87548742,14,I amended the change. Thx for reviewing!,553438968,2016-11-11 07:44:41 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,30725885,3659,false,5551325,148916742,55,"optional: add a fine level log here.  We normally expect this to exist, even on Android.",826745271,2017-11-04 00:25:22 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,36581498,4238,false,6634728,176603930,68,Done.,949790507,2018-03-22 23:36:11 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,14648422,1817,false,6773014,67970244,123,Probably not :),464422624,2016-06-21 23:19:51 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,24658694,3019,false,3350419,117931155,61,The same instance will run by 2 different threads?,696267481,2017-05-23 08:35:38 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,20519378,2615,false,9209972,96686116,23,Done.,599772111,2017-01-18 17:14:22 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,15811717,2067,false,5551325,72351506,72,nit: extra space.,483011045,2016-07-26 22:40:17 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,9853246,1119,false,5551325,42156121,197,Done.,330544983,2015-10-15 15:46:27 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,12108322,1395,false,6634728,52651911,146,"Moved most of the transport listener calls into synchronized, except for in `shutdownNow()` where out-of-order execution is impossible.",385140903,2016-02-11 19:20:20 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,9109657,902,false,6773014,38338161,4,"Again odd, its used. See line 52",307835019,2015-08-31 15:50:31 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,13315543,1592,false,6174876,57490359,141,tiny bit :smiley: ,413486094,2016-03-25 20:57:42 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,25944867,3145,false,3695855,126205870,37,Done,724578536,2017-07-07 17:48:59 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,23445169,2910,false,2489413,111649956,51,why `%s: ` and `this`? It seems not in the same pattern as elsewhere.,670390481,2017-04-14 23:33:44 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,24188131,2980,false,2489413,115792749,35,done,689221827,2017-05-10 16:46:31 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,17787475,2329,false,1014305,84194858,112,This needs to happen earlier. connect() returns only after connect has completed. Ditto for TLS.,530264384,2016-10-20 00:29:23 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,23836404,2945,false,7147247,113556689,37,Removed,678666937,2017-04-26 20:38:55 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,9160044,1011,false,5551325,44472132,5,Or.... unless they are being used in auto generated code.   :/  This will probably break someone.,343837117,2015-11-10 21:03:26 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,17002978,2258,false,1014305,78412996,6,"I believe the race is also pre-existing, since at any time obtainActiveTransport() can return the delayed transport and a new stream be created.",511362454,2016-09-12 17:10:17 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,16769340,2233,false,5551325,77705464,61,"In terms of API stability, I think having a higher barrier to entry is the key.   Marking classes as `@Internal` has worked so far, but this is the first time we are exposing something that could really break if someone started depending on it.      I als",507440595,2016-09-06 19:49:55 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,17034642,2262,false,28198170,81261746,4,> I would much prefer an approach that didn't add a dependency but instead allowed me to hook into Atlas(the Netflix metrics library).    @jhspaybar Would you mind opening an issue at https://github.com/google/census-java to describe your use case and the,514746839,2016-09-30 00:28:13 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,10467687,1207,false,1014305,45240354,121,Where did this come from. Is this new code?,347270268,2015-11-18 17:38:59 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,17034642,2262,false,68019,79444003,44,"Especially since the default implementation is to no-op anyways, it'd be great if we could make the interface gRPC expects not be tied to Census.",514746839,2016-09-19 17:28:39 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,6725573,218,false,6773014,26801323,7,Wanted to be explicit about it as I think we need a multiline script now. See latest commit.,233524026,2015-03-19 20:49:41 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,9442940,1072,false,5551325,40450099,308,"Isn't this still a race?  After realStream is created on line 426, the stream might have already been started with headers sent.",315897922,2015-09-25 14:47:56 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,9160044,1011,false,5551325,39422597,75,If you look back a commit it did actually normalize.  I can change it back to be that way if you want.  ,307439123,2015-09-14 15:39:31 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,9160044,1011,false,5551325,39422706,77,Also char is how string internally supports its characters.  I think it ends being easier to reason about using chars instead of bytes.,307439123,2015-09-14 15:40:33 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,14320328,1744,false,1014305,61582628,9,I think this status here was intended to go to the client. The server could then just received the `status` as-is (in `internalCancel()`).,436183063,2016-04-29 14:07:13 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,27194841,3305,false,120104,131289979,123,Nice though wll this assertion error raise on the correct thread? Maybe use a queue and assert during the test method?,752215320,2017-08-04 00:28:45 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,29819535,3580,false,3695855,147797624,19,Done,808192720,2017-10-30 18:42:47 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,10418960,1203,false,6773014,44851915,90,"Yes, here and elsewhere",346013584,2015-11-14 00:30:11 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,29047522,3500,false,6634728,141181665,15,"nit: can we just use ""def""?",792863694,2017-09-26 20:55:22 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,24519729,3006,false,1014305,116601974,28,Fixed. There were multiple other trivial problems as well.,693502647,2017-05-15 21:10:15 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,32634924,3879,false,1014305,158370574,213,`return null`,868161597,2017-12-21 20:24:48 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,8186852,576,false,3691158,34357394,41,"I think it might be okay to release at `shutdown`, actually. The executor will only be `shutdown` once the refcount reaches 0, not `shutdownNow()`, which will only reject new cancellation tasks, not interrupt those currently running. We only start a cance",279566809,2015-07-10 12:13:41 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,15886121,2089,false,1014305,72166357,144,"This class makes me pretty uncomfortable, especially how it mutates the fields of `RouteGuideActivity` for use in the GrpcRunnable. And the GrpcRunnable itself looks fishy, because I only see `InterruptedException` thrown.",482532263,2016-07-25 23:51:19 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,8750457,771,false,6634728,36571803,21,SGTM,293057056,2015-08-07 22:16:55 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,15886121,2089,false,7147247,72864959,155,Done.,482532263,2016-07-29 21:39:53 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,31177612,3726,false,5551325,150681094,12,"it is recommended that you put this in a named class local to this method.  It makes fort better stack trace messages, rather than $3 or other hard to read names.  It usually only costs 1 line too.",836045594,2017-11-13 22:11:24 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,8186852,576,false,1014305,34286064,41,This should probably happen when `terminated = true` below. That will help guarantee it only happens once (since elsewhere release code you added will run when `shutdown == true` but not when `terminated == true`),279566809,2015-07-09 16:19:05 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,13126007,1564,false,1014305,56541638,16,"Since `attributes()` is `@ExperimentalApi`, let's mark these as such as well.",408600641,2016-03-17 17:14:07 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,6448399,129,false,1014305,25398594,18,s/supporting/support/,223506049,2015-02-26 00:43:49 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,15588077,1977,false,5551325,68605475,27,"two things:   - extra space after comma,  - lines should be broken at the highest possible semantic level.  In this case the `connection` variable should be on the same line as the other arguments.",470198737,2016-06-27 16:11:55 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,28835478,3478,false,2667165,139812653,13,Maybe add a comment about avoiding guava to explain why this helper exists,787531226,2017-09-19 20:44:32 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,8054791,553,false,3664876,32829729,46,nit: could you combine `savedActiveTransport` and `newActiveTransport` and just call it `transport` so that it's always the same variable you return in all cases?,272413438,2015-06-19 11:47:49 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,7263220,338,false,1014305,29122214,16,"If nothing is buffered, the flush will be relatively cheap; basically the cost of the event going through the pipeline.    If the CreateStreamCommand is queued, then it won't need to be marked for future flushing. That's because when it is written it will",249258454,2015-04-27 04:03:11 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,8321297,794,false,1014305,36810266,24,"This makes it sound like the response must be using the same compression type if using compression. However, the server is permitted to choose a different compression algorithm if the client supports it. How is `Message-Accept-Encoding` going to play into",279282297,2015-08-11 21:03:23 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,9701115,1101,false,1014305,41179068,50,Why this new constructor?,322114821,2015-10-05 16:25:51 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,7263220,338,false,3664876,29090800,21,I think you have to upgrade Netty for this method ... is that part of this PR?,249258454,2015-04-24 20:22:41 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,32682826,3882,false,5551325,158154147,71,doesnt there need to be a `>>>` in here?,868565016,2017-12-20 22:34:40 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,28458358,3452,false,5551325,138244338,195,"I went with a different approach.  This should keep the throwable alive for the minor GC collections.     It isn't a disaster if the call site isn't captured, and this avoids adding configuration.  ",779224081,2017-09-12 03:24:53 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,31211538,3735,false,1014305,151220842,48,"Oops. I didn't delete these methods. They're now unused: `determineMethod`, `verifyContentType`",837445365,2017-11-15 19:00:50 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,10711390,1234,false,5551325,46325798,128,"@ejona86 Seems like there is some confusion.  I believe there are two threads involved:     A, which is the application thread, and calls methods on ClientCallImpl   B, which is the transport thread, which will eventually resolve ClientTransportFuture.   ",350704151,2015-12-01 19:28:56 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,19651104,2503,false,1014305,92840204,67,"I'm still concerned that it is non-obvious this adds to the `channelExecutor`, like my concern in the previous PR.",574624490,2016-12-16 16:22:43 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,18022288,2353,false,2489413,85619887,107,done,538464702,2016-10-28 22:23:37 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,10475731,1213,false,1014305,45243119,23,"What changed such that we are doing this in this PR? Wasn't `gracefulShutdownTimeoutMillis()` available in Beta6? Also, is something wrong with Netty's default of 30 seconds?",348339149,2015-11-18 17:58:58 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,26522303,3241,false,1014305,128132228,38,"ClassLoader (the base class) normally calls `findClass()` from `loadClass()`. Because our overridden `loadClass()` calls `findClass0()`, it's effectively unnecessary. However, calling `findClass0()` is just an optimization; I'd probably get rid of `findCl",740090144,2017-07-19 01:02:49 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,9117666,953,false,7147247,38782536,288,done,307016446,2015-09-04 16:47:10 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,19128551,2443,false,9209972,89846884,205,"That makes sense. Maybe `withNoResult()` would work better? I like `pending()` the most, but it's missing `with` and I'd like to to be consistent with other methods. Heh.",562583807,2016-11-28 18:28:56 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,24368700,2991,false,2489413,115881373,5,You can leave `Fail fast` without link and put the link at `wait for ready` in the next line instead:)  ,690187049,2017-05-11 00:12:24 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,8912535,837,false,1014305,37463244,89,This _must_ only be called once. It should observe `notifyTerminated`.,299044393,2015-08-19 18:24:49 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,9082774,892,false,5551325,38219105,107,setListener has logic in it that I don't want to be part of the test.,306715755,2015-08-28 14:43:48 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,18022288,2353,false,5551325,84385073,79,"since this isn't actually a spy, you should rename it",538464702,2016-10-20 22:02:11 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,7530929,431,false,1014305,30335658,122,"This looks like it should be `channel.write(event, eventPromise)`. Then the Handlers don't get strange.",256829053,2015-05-14 14:23:37 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,9160044,1011,false,1014305,44472300,5,"Yeah, this was a legitimate breakage, but one we didn't realize earlier. It's to be used by users, and it has to be compatible between implementations.",343837117,2015-11-10 21:04:35 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,8928784,852,false,1014305,37689574,37,We could receive many acks over the course of a connection. We should keep a boolean of whether or not we are already ready (so we don't call `transportReady()` multiple times).,299474812,2015-08-21 22:40:12 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,30871298,3670,false,2489413,149249778,30,"Is this the precise point that protocol negotiation starts, and transportReady the precise point that it ends? InProcessServer also does this? Does it make sense?",829378408,2017-11-07 01:09:39 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,10711390,1234,false,1014305,46222161,128,I was hoping for this method not to call `newStream()`. I was hoping it would have ClientStream passed as a parameter. That allows DelayedStream to have fewer concerns and not need most of the arguments passed to the constructor or need to call back to Cl,350704151,2015-11-30 23:49:15 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,25695950,3118,false,1014305,123128241,13,"While I wouldn't disagree that `addInterceptor()` may be a better name, it is probably better to copy `ManagedChannelBuilder`'s `intercept()` name.",719229403,2017-06-21 00:19:06 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,12108322,1395,false,6634728,52694306,189,Done.,388149161,2016-02-12 01:10:21 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,10781220,1248,false,1014305,46625171,67,We need the RunsWith annotation.,351729874,2015-12-03 22:49:03 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,14861720,1842,false,6773014,65992934,115,In the case of clients we expect the onReady handler to be bound before call start using the StreamObservers.capture method so there should be no raciness here. I have some tidy-ups to do with that,449027529,2016-06-07 00:26:51 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,10781220,1248,false,1014305,46627190,206,"I guess you are trying to make this more ""realistic"" by going through the executor?",351729874,2015-12-03 23:06:56 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,15588077,1977,false,1014305,68446892,100,"`1234` should be a constant as well, so that it can have a name, like `BDP_MEASUREMENT_PING`",469089847,2016-06-24 19:04:23 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,16134367,1996,false,21077,73055084,49,@buchgr do you plan to push this to netty ?,485134069,2016-08-01 21:19:50 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,22478073,2839,false,9209972,108049514,83,✂️ ,652157849,2017-03-26 01:19:13 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,22478073,2839,false,5551325,107812843,30,wrap line to keep arguments on the same line.   That or do an argument per line.,647816079,2017-03-24 00:11:36 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,25944867,3145,false,1014305,132565251,50,This is complicated and surprising. I had hoped only the RST stream method I mentioned earlier would have this logic.,757279188,2017-08-10 20:55:03 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,32144857,3839,false,3695855,162813440,119,"`@GuardedBy(""lock"")`",892259515,2018-01-21 14:15:20 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,21824987,2767,false,3695855,103541984,48,Lock and `@GuardedBy` added.,633861708,2017-02-28 20:14:12 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,18168140,2366,false,9209972,90704509,44,It's called in `NettyTransportFactory.newClientTransport`,541009487,2016-12-02 19:28:54 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,14441170,1793,false,1014305,61972925,5,Could we mark this `@Internal`?,438780603,2016-05-03 23:24:05 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,14266866,1729,false,6634728,61337761,25,I can't relate this change to the PR description. Can you provide some background?,435096112,2016-04-27 21:16:01 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,7799656,505,false,3664876,31637964,89,So the question is which status to use in each case:    1. channelInactive (unavailable?)  2. close (cancelled?)  3. http2 plaintext upgrade failed (failed_precondition?),266395836,2015-06-03 13:51:10 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,6986161,274,false,7000520,27946199,24,Done.,241527286,2015-04-08 04:40:29 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,10919835,1263,false,6634728,46993013,7,"I wonder if this should be on `CallOptions`, since it's an option anyway.",356709367,2015-12-08 18:31:51 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,9160044,1011,false,5551325,44471827,5,Oops.   These tests were failing so I changed them to use '-'.  It doesn't appear to be in used internally.,343837117,2015-11-10 21:00:53 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,34741950,4060,false,3695855,168350105,167,"Maybe replace 1000 with a constant, so it's not necessary to read the comment in the constructor to understand why it's not just subtracting 1 here?",909825914,2018-02-15 00:04:43 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,16002471,2131,false,1014305,73605713,15,Happened to discuss offline. run() declares no checked exceptions.,487213934,2016-08-04 21:25:15 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,13679378,1641,false,6174876,59328260,324,reuse it?,423647366,2016-04-12 06:55:12 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,25708644,3119,false,2667165,138661674,55,Let's expand the comment here to explain that we are requesting a message here because we expect to *send* a response upon receiving the request. Otherwise it might be confusing to request a message when the outbound direction is ready.,781224940,2017-09-13 15:51:36 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,7594214,446,false,1014305,30622980,96,"Change the prefix above, and then this stuff should become:  ```java  File file = new File(value.substring(UNIX_DOMAIN_SOCKET_PREFIX.length()));  if (!file.isAbsolute()) {    mustBeAbsolute();  }  ```",260141256,2015-05-19 15:17:31 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,24116958,2974,false,6634728,115055431,6,"I think other languages will have the same problem getting the message wire size with stream-based compression, because message boundaries have diminish in the compressed stream. Uncompressed size will be more feasible.",684690033,2017-05-05 18:02:49 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,32933532,3904,false,3695855,166108426,27,"Added `cancelReconnectTask()`.    Re: IDLE mode: I'm not sure. The javadoc on `ConnectivityState.IDLE` (i.e.,  https://github.com/grpc/grpc/blob/master/doc/connectivity-semantics-and-api.md and its transition diagram) implied to me that the channel state ",900358493,2018-02-05 20:53:50 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,31021840,3705,false,2667165,150104750,5,`onStreamAllocated` looks like a good place to move this,832449745,2017-11-09 22:23:42 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,32140179,3838,false,1849804,157331281,20,"OK, I have tried but I got fail parsing phase.    ``` java    @Test    public void testJsonMarshallerFailToPrint() throws Exception {      try {        Marshaller<Type> marshaller = ProtoUtils.jsonMarshaller(Type.getDefaultInstance());        marshaller.s",857486907,2017-12-16 02:09:24 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,13306021,1587,false,9209972,57400834,138,"Ah, yes. Fixed.",412948753,2016-03-24 22:59:10 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,12541796,1472,false,1014305,54141411,16,"Status here would commonly be UNAVAILABLE, which is not permitted in ClientStream.cancel(). Let's just change ClientStream to allow anything other that `isOk()`?",394809318,2016-02-25 18:35:29 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,24658694,3019,false,6634728,122851797,41,"This check is too implicit. `channelExecutor` is implementation detail and better not be exposed.  Instead, you should verify whether `mockLoadBalancerFactory.newLoadBalancer()` is called.",713281772,2017-06-19 23:47:33 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,17205983,2286,false,6634728,79741932,39,Done.,516032115,2016-09-21 00:36:15 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,12820112,1526,false,1014305,55426774,261,"I was okay with replaying each flush. I wasn't too concerned about that level of performance in the slow case. It should be possible to coalesce flushes, but is slightly non-trivial because of interactions with other methods like `halfClose()` and `cancel",403323656,2016-03-08 21:02:41 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,10972789,1271,false,5551325,47576544,143,Fixed.,360235331,2015-12-14 23:35:10 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,15613600,1986,false,6634728,69370281,5,Fixed.,471287709,2016-07-02 01:19:31 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,10418960,1203,false,6773014,45684862,50,Created a constant exception.   http://shipilev.net/blog/2014/exceptional-performance/,347905676,2015-11-24 00:59:06 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,33294686,3889,false,6634728,160569397,148,We use GRPCLB or grpclb as a special term. It should not be split.,883385742,2018-01-10 01:21:41 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,8312845,680,false,7689743,36153821,40,ClientCallFactory or ClientCallProvider?,279106016,2015-08-04 00:59:58 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,8916743,841,false,1014305,37492723,37,"This looks like it should be INTERNAL, since the application didn't specify an invalid argument. Instead, either the grpc library on client or server has a bug.",299326101,2015-08-20 01:45:48 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,15988840,2126,false,7524125,74467321,105,changed,489424314,2016-08-11 17:39:00 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,8470641,629,false,1014305,35035024,29,Then go ahead and add documentation to `sslSocketFactory()` describing its behavior.,280318334,2015-07-20 17:41:42 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,18908780,2427,false,7396743,88563246,467,Question: Why do we call `handleTermination()` here and from `shutdown()`? Looked redundant..,558389459,2016-11-17 22:38:20 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,24658694,3019,false,1014305,128312624,32,`delayedTransport.shutdown()` can do lots of things; it seems strange to single-out adding anything to the `channelExecutor`. But if you add a comment pointing out the subtle usage of `drain()` (I'm unsure whether here or at the drain is better) I could l,724636093,2017-07-19 17:27:18 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,12503950,1465,false,1014305,53740339,43,"package-private? FailingClientTransport is package-private, and I don't see any uses outside this package.",394141595,2016-02-23 06:21:16 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,12820112,1526,false,5551325,55296866,15,What happens if supplier  != null and shutdown is true here? ,402771006,2016-03-08 00:13:59 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,13835440,1668,false,1014305,59612744,48,"@buchgr, that sounds fine to me; I've been using the build generally to create the `NettyServer`. Probably doesn't need a test for not started here, since it is invalid.",425010936,2016-04-13 19:46:55 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,14320328,1744,false,6174876,61613436,34,@carl-mastrangelo yep. maybe better?,436342166,2016-04-29 17:13:26 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,7335867,361,false,1014305,29464129,438,We're no longer going to report that the upgrade failed. Should this throw an exception?,251816128,2015-04-30 17:56:40 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,17034642,2262,false,5551325,82017034,160,explain why synchronized in comment.,525256808,2016-10-05 16:43:40 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,6642758,193,false,6773014,26352297,25,Done,229226181,2015-03-12 21:54:32 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,26959707,3289,false,8717394,129978784,10,"That helps, I think it is more clear now. ",747056500,2017-07-27 22:55:58 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,32147706,3840,false,6634728,155685848,71,"This could use a better name. Maybe ""PendingStreamRegistry""",857888821,2017-12-08 01:26:44 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,14870158,1846,false,5551325,64669859,42,checkNotNull for both params.,452600480,2016-05-25 23:21:21 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,13220231,1570,false,3402699,56901977,109,you could move these checks into `lastCall()`,410928156,2016-03-21 21:36:06 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,27354855,3325,false,1014305,132572936,15,"ConnectionSpec is part of grpc's API in this class. We don't want to expose our internal fork, so we let users specify okhttp's ConnectionSpec and then we use Utils.convertSpec() to copy it into an internal equivalent.    Feel free to eagerly convert in `",755705670,2017-08-10 21:29:31 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,13220231,1570,false,9209972,56912981,142,"Thanks, fixed!",410928156,2016-03-21 23:07:06 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,25944867,3145,false,3695855,127023768,25,Fixed,724578536,2017-07-12 17:47:09 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,9109657,902,false,1014305,38693181,50,"We want to use a separate executor for scheduling. ScheduledExecutorService is a fixed-size thread pool; it can't vary in size, which seems pretty restrictive. Also, if the application gets behind such that the executor queue fills we will want to handle ",306959416,2015-09-03 18:33:25 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,22394838,2826,false,2489413,107507568,103,stayed as a field,646780126,2017-03-22 19:19:14 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,6986161,274,false,7000520,28126974,6,"Good point, Done.",241527286,2015-04-10 05:42:57 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,8945736,872,false,1014305,38213611,23,Was this change necessary for verifying content type?,301501218,2015-08-28 13:45:53 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,11697710,1327,false,1014305,50326043,37,"Oh, duh, you may have created the certificate to have that ""localhost"" CN. What we've done elsewhere is use server1.pem for the server and have the client call `ChannelBuilder.overrideAuthority(TestUtils.TEST_SERVER_HOST)` to change the name it verifies f",375564997,2016-01-20 21:58:05 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,8945736,872,false,3664876,38211782,43,done.,299700823,2015-08-28 13:28:06 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,9096416,894,false,3664876,38459702,23,Need to reference an existing issue.,306839501,2015-09-01 17:18:39 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,9118649,961,false,5551325,39067677,52,"Not sure if intentional, but I believe getContextClassLoader can possibly return null.  Any reason not to use ManagedChannelProvider.class.getClassLoader() ?",307281988,2015-09-09 14:52:21 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,36419739,4226,false,5551325,175181016,2,2018,946261782,2018-03-16 18:38:03 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,24884407,3029,false,2489413,121233414,85,That's fair.,707974229,2017-06-09 22:21:16 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,6444534,130,false,896,25404666,19,"Comma before but, but also perhaps a period: ""...without TLS. This is convenient...""",223382782,2015-02-26 03:50:54 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,19128551,2443,false,9209972,89666959,314,nit: `Helper#createSubchannel`,562583807,2016-11-26 07:02:50 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,7869116,514,false,6634728,31936294,15,Done.,267424935,2015-06-08 15:06:56 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,7631628,463,false,3664876,30752062,213,Strange that checkstyle didn't find this ... done.,260674047,2015-05-20 19:34:57 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,9144040,982,false,1014305,39182582,14,Unwrap line?,307356289,2015-09-10 14:43:40 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,10781220,1248,false,6773014,53208958,32,Currently using a generated proto stub so this is no trivial. Deferring,388260918,2016-02-17 18:34:50 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,19382692,2479,false,9209972,90721069,113,"Ahh, yes. Made it unnecessary complicated. Fixed.",569478195,2016-12-02 21:16:31 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,19382692,2479,false,6634728,92909267,93,"Whether we should propagate the error unconditionally is arguable. It's fine for now, but I think we should shutdown and discard subchannel if there is one. Otherwise you may end up keeping a connection that you will never use.",575292520,2016-12-17 00:47:51 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,36700621,4249,false,2489413,176247217,45,Done.,952263848,2018-03-21 21:40:20 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,19382692,2479,false,9209972,90736085,206,Oh yeah. My bad - shouldn't be blindly copy-pasting ;),569815276,2016-12-02 23:08:03 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,30767746,3663,false,5551325,149173652,138,Done.,826858697,2017-11-06 19:11:14 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,13671071,1631,false,5551325,59083457,10,Done.,421641370,2016-04-08 20:19:54 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,30767746,3663,false,5551325,149172397,31,Done.,826858697,2017-11-06 19:06:08 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,10475731,1213,false,3664876,45217563,25,done.,346219471,2015-11-18 14:57:43 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,12736343,1506,false,1014305,56230744,4,"We need to avoid Guava collect. We have an armistice with some Android teams that we can use Guava if we don't use Guava collect.    There are actually places where we are using it now that have snuck in, but I was going to be removing them.",407332634,2016-03-15 20:03:15 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,20519378,2615,false,9209972,96548832,6,"@ejona86 Heh, what about this one?",599772111,2017-01-18 01:06:57 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,27477168,3339,false,2489413,132798377,105,"Okay, let me try to schedule everything with fake clock.",758194258,2017-08-11 22:59:08 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,19377493,2477,false,6634728,90665359,9,"Even if this is temporary, we should not allocate a new ID every single time `getLogId()` is called.",569197935,2016-12-02 15:49:05 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,13306021,1587,false,9209972,57400838,140,Updated.,412948753,2016-03-24 22:59:15 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,27067007,3295,false,2489413,130470034,14,"@stephenh Your argument makes sense. We should stay `IDLE` when we are in `IDLE` while ping had been scheduled, and then `onDataReceived`. But the check `if (pingFuture == null)` still looks strange, may be `Preconditions.checkState(pingFuture == null, ""T",749644025,2017-07-31 21:41:40 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,27067007,3295,false,1014305,130465922,4,"It seems like this should be done in all cases (but doesn't matter with DELAYED). If the state is IDLE, the current code would prevent all further PINGS (because it would never be rescheduled). Tying `pingFuture == null` to when there is no callback sched",749644025,2017-07-31 21:24:17 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,15664914,2010,false,2489413,71436933,5,"can we pass `vector<pair<string, string> >* options` here? as I will add a flag for allowing deprecated",472367436,2016-07-19 22:35:16 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,14870158,1846,false,1014305,64626756,170,"Yes, I am concerned with the performance of copying the hash map. I'm okay with copying it only when `withOption` is called, since it will be rarer and we can use something quick and easy now and only improve its performance when necessary.",449203119,2016-05-25 18:28:00 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,8916743,841,false,1014305,37594286,38,"We haven't generally been copying the message from caused exceptions. However, we should really be providing more context here anyway, so can we replace `e.getMessage()` with a more clear message. Maybe something like: ""Unable to decompress messages from ",299383912,2015-08-20 21:54:18 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,7799656,505,false,1014305,31632693,108,It seems like we don't really gain much by saving this Throwable.,266158138,2015-06-03 13:06:26 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,14648422,1817,false,6773014,67969265,43,@ejona86 Given that this has already diverged significantly I'm not overly concerned with merging as discussed. ,462195224,2016-06-21 23:10:49 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,20135135,2565,false,6634728,94817534,120,No. One char excessive.,591119612,2017-01-05 17:57:59 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,13835440,1668,false,5551325,59608004,48,"This is testing the expected use case: Listen on port 0, get some other port.  I want the call to go all the way down to the kernel and back.    pickUnusedPort is for testing?  Also it precludes you from picking the interface on which to pick an ephemeral",425010936,2016-04-13 19:14:09 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,15355838,1910,false,1014305,66524952,16,Maybe `withCredentials`? Meh.,461465071,2016-06-09 21:26:29 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,12599821,1482,false,1014305,54667022,26,Renamed method to `statusFromFailedPromise` with a `ChannelFuture` argument.,397972426,2016-03-02 01:36:40 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,18261171,2374,false,1014305,85841597,92,"The copy should be made here, not in `NettyClientTransport`. `NettyClientTransport` is created _much_ later, each time we want to create a new connection. So that gives plenty of time for the map to mutate before the defensive copy is made. At that point,",542970764,2016-10-31 21:54:15 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,8936684,861,false,5551325,37781677,31,"This class already has several imports referencing the internal package, why not just reference it in the javadoc?",299571454,2015-08-24 16:06:29 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,8391731,630,false,1014305,34818824,24,"This is the very first usage of `NotThreadSafe`. We currently follow the standard practice of ""something isn't thread-safe unless it says it is thread-safe."" Are you thinking that we should start putting this on all classes, or this one is special for som",279847159,2015-07-16 16:09:23 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,10781220,1248,false,1014305,52686692,32,Just make this a test in grpc-core? It doesn't seem to depend on anything else.,388260918,2016-02-11 23:45:09 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,6986161,274,false,7000520,27939007,6,"Yeah, I used bidi streaming because it can return a final response at last, which can be used to verify the correct data has been sent and received.    How about ""CheckAndUploadCall""?",241527286,2015-04-08 00:42:34 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,8391731,630,false,1014305,34742023,125,"Why remove ""newStatus""?",279816475,2015-07-15 21:33:24 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,27145413,3300,false,6634728,131454528,67,ditto,752892099,2017-08-04 18:20:18 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,7799656,505,false,1014305,31632499,74,Would it be better to create the SslHandler within newHandler()? It seems all this code could be within newHandler() and we pass an sslHandler to BufferUntilTlsNegotiatedHandler instead of SslBootstrapHandler.,266158138,2015-06-03 13:04:50 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,29283579,3529,false,1014305,143302073,46,"I don't think the `String` cast is necessary. If it's not, remove it.",797481534,2017-10-06 21:53:25 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,28534303,3454,false,2667165,141425146,80,"Added an unsychronized counter whose value we copy to the volatile, resulting in 1 volatile write.",793609905,2017-09-27 18:13:16 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,8321297,794,false,1014305,36810399,80,"How is ""compression level"" a ""decompression method""?",279282297,2015-08-11 21:05:05 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,24024263,2964,false,6634728,114421280,26,"Also `verify(transports.peek().transport, never()).shutdown[Now]()`?",682925020,2017-05-02 20:48:37 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,13771814,1656,false,5551325,62097732,72,"How is cancel different than writeTrailers in this context?  I know what it means for the distinction at the Application layer, but not so much at the stream layer.",438057689,2016-05-04 19:16:28 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,9534380,1082,false,5551325,40705387,13,Done.,316912629,2015-09-29 15:58:43 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,29212379,3521,false,5551325,142827952,193,this is scary.   I don't know if I want people copy pasting this .  Doesn't OkHTTP have one you can re appropriate?,795612215,2017-10-05 00:49:47 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,12778182,1517,false,1014305,55052902,52,`transferEncoding`?,400654345,2016-03-04 16:36:19 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,27933733,3395,false,1014305,139566270,42,Why? If we ignore that case won't we just notice the next time we try to read?,782958916,2017-09-18 23:31:48 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,9109657,902,false,1014305,38332746,1,Copyright header. Ditto elsewhere.,307835019,2015-08-31 14:59:17 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,27933733,3395,false,1014305,139568151,24,`&& state == HEADER`,782958916,2017-09-18 23:45:34 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,10467687,1207,false,5551325,44852236,126,"Decompressor needs to be set upon reading the headers, and before the first message being read.  AbstractClientStream has a method inboundHeadersReceived() which is where it is set client side.  AbstractServerStream doesn't have such a method, presumably ",346006851,2015-11-14 00:39:46 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,9149639,979,false,7000520,39182574,44,Just Exception? we may not want to catch Error?,307356290,2015-09-10 14:43:35 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,11165431,1294,false,6634728,48214595,14,javadoc of `ClientStream.start()` says implementations should not call listener from within start().,363384000,2015-12-22 01:55:05 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,12503950,1465,false,1014305,53740455,38,SHUTDOWN_TRANSPORT?,394141595,2016-02-23 06:23:38 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,19382692,2479,false,6634728,91429296,109,"`IDLE` means the subchannel has no connection, thus you should return `withNoResult().",572603815,2016-12-08 02:01:57 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,19382692,2479,false,7396743,91374001,130,"nitpick: no strong feeling, but using `""server3""` here assumes that we create three fake addresses in `setup`? It might be better to use a totally different name or define a constant to avoid accidental overlap.",572578689,2016-12-07 19:56:52 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,14867525,1845,false,1014305,66889377,108,"Ah, I see. The squashed commits made it hard to see what changed.",463862212,2016-06-13 23:56:22 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,28417571,3446,false,5551325,138415414,21,"For the open source case we usually dont use it, so the handler would serve only to remove itself.  Internally, we would set it.   I'd prefer to not auto remove itself for the common case.",778370979,2017-09-12 17:28:27 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,15044516,1876,false,5551325,65430716,68,That's a good point.  I split the method into two separate checks.,453220634,2016-06-01 19:55:59 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,8586229,672,false,1014305,35930752,135,"Do you still want this as a separate function, even though it is now only used one place?",284324267,2015-07-30 20:53:20 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,24658694,3019,false,2489413,124429016,33,done,723650583,2017-06-28 00:29:01 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,17034642,2262,false,120104,78692824,98,"""createOnServer"" is interesting as it tells you where you should invoke this method. however, it is awkward as when you call a method, you are looking more for what it does. I'd say createServerContext/newServerContext etc is less distracting    Also, see",512070930,2016-09-14 06:34:47 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,18693918,2413,false,2489413,88526027,69,"`Default: ""` and ditto",557749948,2016-11-17 19:21:19 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,8382399,625,false,1014305,34939568,44,Why is this no longer abstract?,279908164,2015-07-17 21:29:41 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,9160044,1011,false,3664876,44414337,129,Why are we no longer interning the string? Apologies if this was already discussed.,343828502,2015-11-10 13:51:31 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,25197994,3066,false,1014305,120944568,16,"That sounds true for CODE_KEY, but not this description marshalling.",708135706,2017-06-08 17:05:21 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,28089268,3419,false,2667165,148399983,34,"In this case I  need to wire up the mockInputStream to the methodDescriptor, so I can't use the canned MethodDescriptor.",824935921,2017-11-01 22:16:53 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,32144857,3839,false,1014305,155617068,132,s/held/hold/,857895056,2017-12-07 19:26:57 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,14218006,1719,false,1014305,61514216,31,Calling get() increases a reference count and may create it. I'll try to come up with something less likely to cause problems.,434163337,2016-04-28 22:40:29 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,11697710,1327,false,3664876,50326015,4,"IIRC, that was the outcome of our previous discussions ... that we wouldn't include tcnative in the automated tests due to the OpenSSL dependency. Not that configuring jetty-alpn is easier.",375564997,2016-01-20 21:57:53 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,26278382,3204,false,768574,126519023,68,Done.,732219940,2017-07-10 19:51:21 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,8141876,562,false,3402699,33498609,150,I think the test name is misleading since it isn't ignored but communicated via return value. Maybe `closeReturnsFalseIfAlreadyClosed`.,276403069,2015-06-29 16:55:02 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,33807978,3986,false,1014305,164904845,95,"nit: This class isn't extendable, so use `if (!(o instanceof RetryPolicy))`?",903129972,2018-01-30 22:54:58 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,10154010,1174,false,3664876,43526269,46,Ah right  :),338579940,2015-10-30 16:01:23 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,35897839,4173,false,2462032,172739771,12,"I didn't think it would use both runtimes, because it's the `protobuf-lite` folder.   But there is a possible conflict here   https://github.com/grpc/grpc-java/blob/master/java_grpc_library.bzl#L112   https://github.com/grpc/grpc-java/blob/master/protobuf",935649775,2018-03-07 04:38:57 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,15897963,2093,false,1014305,74282170,39,delete?,489166821,2016-08-10 16:43:39 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,27397957,3329,false,2489413,132565823,27,`this.isDrop = result == DROP_PICK_RESULT`; No need of the 4th argument.,757451644,2017-08-10 20:57:41 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,12820112,1526,false,5551325,55426141,72,"Shouldn't this cancel the stream?  Cancellation just removes all the callbacks, not actually cancels the underlying stream.",403323656,2016-03-08 20:58:26 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,14952645,1854,false,3664876,64307054,16,@carl-mastrangelo refresh my memory ... do we allow the app to override userAgent on a per-call basis?,451220128,2016-05-23 23:31:39 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,16705172,2221,false,2489413,77420174,32,"I think it is the second case - although it's arguable.  I consider `scheduleEndofCurrentBackoff` or `scheduleBackoff` as a complicated task, if the former were merged into the latter, that's fine, then one usually adds a comment before it for better read",505775977,2016-09-02 22:26:13 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,18272030,2380,false,1014305,85457213,1,This and ReflectableServiceGrpc look unused in this PR.,543888054,2016-10-28 01:01:55 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,13771814,1656,false,1014305,62280482,130,"`endOfStream ? false : flush` reads a bit easier for me, but it's also what was in the preexisting code.",438057689,2016-05-06 01:45:11 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,32634924,3879,false,2667165,164259809,73,Moved,868161597,2018-01-27 02:11:12 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,34070524,4005,false,1014305,164006941,81,After discussion offline: we'd actually be okay without this. Being able to have it is NameResolverProvider being a special case.,898846101,2018-01-26 00:22:14 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,18102586,2362,false,1014305,86023784,53,"`else` doesn't run when you `return`. I could use a `do {} while (false)` + `break` to get similar effect, but finally is more natural.",539759565,2016-11-01 21:00:57 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,15988394,2115,false,5551325,73444813,154,"currentTimeMillis is the wrong function to call.  It can go backwards in time, and is extremely coarsely grained.  You want System.nanoTime() ",486511140,2016-08-04 00:18:49 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,16893769,2240,false,1014305,78112238,91,"I'm also a fan of the superfluous comma. It's a pretty common pattern, and is what the autoformatter for BUILD files does, for example. Back in the day, lots of people hated IE because it didn't support the trailing comma.",508827215,2016-09-09 00:21:08 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,31273128,3748,false,2489413,151266764,32,User can only set tcpff by `InternalNettyChannelBuilder` class. I cc'ed you a CL the builder in which is hard to test without an accessor.,838106188,2017-11-15 22:09:32 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,36130879,4204,false,2489413,173957109,190,%d,939894180,2018-03-12 21:46:04 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,26879891,3276,false,1014305,129690297,20,"Doesn't this need `@SuppressWarnings(""deprecated"")`?",745459208,2017-07-26 20:41:23 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,6448399,129,false,1014305,25407199,37,"Important details:  1) trailers is required to be non-null  2) trailers is only ""from the server"" when called from AbstractClientStream itself. All other users do ""new Metadata.Trailers()""    That tells us our API is weak and explains why it is so hard to",223506049,2015-02-26 05:22:54 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,13282068,1583,false,6773014,58926190,147,"Don't think so, the 'offered load' -> poisson mean -> lamda of exponential distribution when we use the sample() method. Am I missing something?",417038489,2016-04-07 18:59:16 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,13774306,1658,false,5551325,59283725,20,What will happen if version is not defined?,423435987,2016-04-11 21:20:35 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,33949792,3992,false,5551325,164002463,94,consider letting the exception propagate.,898731683,2018-01-25 23:50:14 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,7799656,505,false,3664876,31634938,74,"We can move the creation of the bootstrap handler to the `newHandler` method, but we still need it because we need the `ChannelHandlerContext.alloc()`.",266158138,2015-06-03 13:24:09 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,28370184,3441,false,6634728,137585516,81,"Since you have made the effort to encapsulate the relation between terminating and terminated in `Terminator`, this check, which assumes that relation, doesn't seem to belong here. I would add `goTerminating()` and `goTerminated()` in `Terminator` and do ",777375064,2017-09-07 16:13:21 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,19382692,2479,false,6634728,93330743,40,Why not `containsExactly()`?,579987676,2016-12-20 21:38:29 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,18125118,2365,false,1014305,90122020,49,"This needs to delegate to `negotiator`. It should generally be HTTPS, but it's based on the other negotiator used. It's necessary for determining the correct scheme to use on the HTTP/2 connection.",542989164,2016-11-29 21:48:57 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,28458358,3452,false,1014305,138153224,165,"Just to be clear, this means that we probably won't detect problems in Servlet shutdown or equivalent, where the ClassLoader itself is being GC'd, right?",779224081,2017-09-11 18:30:06 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,10565503,1219,false,3664876,45414388,40,This needs to be non-final now since we lazy-create the handler.,348364060,2015-11-19 22:02:16 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,18272660,2381,false,1014305,85837246,81,`ByteStreams` is beta. We can't use it except in tests. There is io.grpc.internal.IoUtils.toByteArray.,544589954,2016-10-31 21:28:59 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,13771814,1656,false,1014305,62421415,18,"It was a pre-existing race, so I felt comfortable not addressing it in this PR.    If `directExecutor` is used, then there would be a problem, except that WriteQueue is used. I could agree that maybe all the cases are fine, but it is very difficult to pro",440209046,2016-05-07 19:25:19 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,13771814,1656,false,5551325,62097876,100,final?,438057689,2016-05-04 19:17:21 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,29212379,3521,false,5551325,150668335,181,optional: there is a ton of indenting in this function.  maybe extract this to a helper class?,795612215,2017-11-13 21:20:48 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,29212379,3521,false,3695855,151574651,109,Updated,795612215,2017-11-17 00:22:25 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,30722719,3656,false,2489413,151584334,200,Done.,830418423,2017-11-17 01:36:22 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,15361873,1912,false,6634728,66660582,38,The comments before this if-statement needs to be updated.,462178644,2016-06-10 18:32:15 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,7312958,348,false,1014305,29470863,6,We should do the same thing here and for closed calls. Right now though one returns false and the other returns true.,251849414,2015-04-30 19:12:33 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,18664181,2410,false,1014305,87249551,14,"FWIW, that's not an acceptable reason to include the change in this PR.",552386035,2016-11-09 18:30:41 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,8770486,790,false,6634728,36914004,46,"I think SOURCE is appropriate, as we are marking them both as `@Internal`, thus we don't expect any tool to check for them in class files.",293396474,2015-08-12 19:07:35 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,16842829,2235,false,5551325,77719670,295,You might check if this is ever true.  The changes you made in https://github.com/grpc/grpc-java/commit/edf2c62fd55b74be7b1a85191f8e2f27099fdf75  I think cause huffman coded headers to always over allocate (by roundabout way  of HuffmanDecoder constructor,507785185,2016-09-06 21:09:31 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,7352120,367,false,3664876,29980090,5,@louiscryan ... same question ... can you revert?,251898752,2015-05-08 19:55:06 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,9127716,901,false,6634728,38328542,5,"Agreed. We don't change it now.    Right it's not safe to do so. The problem we had earlier was that the dependency on grpc introduced a transitive dependency on a certain version of protobuf runtime, which was different from the version of `protocArtifac",307128758,2015-08-31 14:15:39 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,7491207,418,false,3664876,30078583,1,done.,255411799,2015-05-11 18:32:43 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,32144857,3839,false,2489413,162223411,10,Done.,891334227,2018-01-18 00:51:38 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,32144857,3839,false,1014305,155640116,157,"Every stream is closed. But we must call masterListener.closed() only once. So if more than one of the streams has this boolean set, and then they complete naturally (or are cancelled), then we'll end up calling masterListener.closed() multiple times.",857895056,2017-12-07 21:03:21 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,16495457,2192,false,5551325,76162517,1,This should probably go in the benchmarks directory under    benchmarks/src/jmh/java/io/grpc/internal/....    to match the other existing micro benchmarks.,499510558,2016-08-25 00:14:41 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,8177821,574,false,3664876,33504469,18,Preconditions for method and callOptions.,275560753,2015-06-29 17:50:23 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,16842829,2235,false,5551325,77870187,167,Is this going to jive with Normans change to make these longs?,508306097,2016-09-07 17:40:24 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,20816402,2667,false,5551325,98261499,128,Done.,607153483,2017-01-27 18:30:47 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,19962990,2557,false,2489413,94082267,465,"Since `this` and `list` are actually one-to-one (every instance of `this` is created at line 425 using a unique `list`), why not synchronized the entire function?",586167208,2016-12-28 22:02:08 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,21016909,2690,false,7000510,100640823,19,"We really shouldn't make a copy of this, without some TODO reflecting that it *is* a copy, and the right thing to do is depend on the source version (https://github.com/google/instrumentation-proto/blob/master/stats/census.proto). Is there some reason you",612662544,2017-02-10 22:52:09 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,12803662,1520,false,1014305,55734694,66,Specify UTF-8,401208959,2016-03-10 19:23:22 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,30984870,3699,false,1014305,151811124,93,"This will be a duplicate log entry, as `createBinaryLog()` also logs before returning `null`. Choose one.",832565247,2017-11-17 23:16:20 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,18272660,2381,false,7147247,85617154,102,"Done. I'm cancelling the call now. However, I don't think the status will be propagated without the stream being started. Do you think we should start the stream and then do the cancelling?",543173313,2016-10-28 21:57:30 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,7483798,417,false,3402699,30753335,87,done,255429989,2015-05-20 19:48:42 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,8372394,619,false,1014305,34489877,30,"When writing the code, I'd rather not defeat Java's dead code and return detection. I think this is more a code style thing that should be left as-is unless there is a need to change it. So in new code you can do it either way, but let's not change existi",279698767,2015-07-13 15:44:47 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,13282068,1583,false,6174876,59193203,29,@louiscryan All options except for heap size and `AggressiveOpts` are on by default. AFAIK `AggressiveOpts` enables experimental optimizations that haven't proven to be useful / stable enough to be enabled by default. I think we should reduce the VM flags,421448370,2016-04-11 12:08:16 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,19962990,2557,false,2489413,94186160,358,line-wrapping: prefer to break at a higher syntactic level,586486277,2016-12-29 22:17:16 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,7483798,417,false,1014305,30715701,111,"It's fine to remain. My comment was a bit of a +1. The shutdown+terminated isn't necessarily any better than it is doing now, but doing it async would be really nice.",255429989,2015-05-20 13:38:02 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,11070710,1282,false,5551325,47585936,67,final?,360365905,2015-12-15 01:25:18 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,8750457,771,false,1014305,36571568,21,"I considered something like that, but looping over `jacocoSourceProjects` to call `evaluationDependsOn` is misleading.",293057056,2015-08-07 22:09:18 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,9659643,1098,false,5551325,41049096,94,Done.,319698498,2015-10-02 16:00:20 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,36379618,4222,false,3695855,174880797,18,"The point of null here is to be able to send RST_STREAM to the server without invoking `transportReportStatus` (again) in `NettyClientHandler#cancelStream`. This field is accessed in exactly one place (`NettyClientHandler#cancelStream`, which should be th",945317889,2018-03-15 18:12:07 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,6852840,252,false,7000520,27844822,13,done.,240176698,2015-04-06 23:01:17 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,22887723,2859,false,1014305,109026747,6,Done,657990179,2017-03-30 20:19:19 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,13710217,1654,false,1014305,59081935,5,Revert this change. It shouldn't be necessary and it was purposefully changed to `'nano'`,421652306,2016-04-08 20:07:11 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,13220231,1570,false,3402699,56909431,142,"Definitely don't want to sleep here. Instead, you'd need to schedule the subsequent attempt using a `ScheduledExecutorService`.    I can't recall exactly what the threading guarantees are, though, for calling the listener. But since you're only invoking m",410928156,2016-03-21 22:34:56 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,19458362,2017,false,5551325,70106762,48,s/ArrayList/List/ ,479114951,2016-07-08 17:04:11 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,12924618,1538,false,5551325,55581377,10,"FYI, hashcodes will be reused within the same process as transports come and go.",403973675,2016-03-09 20:13:23 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,16842829,2235,false,6174876,77731218,115,"@carl-mastrangelo     I copied this code from Netty's `DefaultHttp2HeadersDecoder`.    Regarding the cost of floating point multiplication, this will be lost in the noise really. Decoding headers takes microseconds, and floating point multiplication takes",507785185,2016-09-06 22:34:05 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,14259244,1724,true,5551325,61298826,27,Here too.  You'll need to use a real instance rather than a mock.,434960299,2016-04-27 17:17:09 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,7295443,342,false,3664876,29181386,233,Oh I see you're using double so you can round.  Never mind.,250285117,2015-04-27 17:26:10 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,18022288,2353,false,2489413,84168022,91,This may confuse readers. Added explanation in javadoc.,537507468,2016-10-19 21:11:22 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,15634147,1992,false,7147247,70151528,111,I see. Changed it to what Kun suggested.,471935832,2016-07-08 22:45:03 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,26488598,3235,false,6634728,127489048,60,ditto,736617024,2017-07-14 15:55:23 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,16223983,2159,false,5551325,74834852,22,"Because of the way CIS works, I think this is either a no-op or objectively better.  There are like 3 copies in the current code path, this cuts it down to be at most 1 or 2 based on message size.      Before (large message):   1.  Copy from network to di",492756169,2016-08-15 21:05:12 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,6642758,193,false,1014305,26351265,25,checkNotNull?,229226181,2015-03-12 21:37:51 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,19042157,2430,false,3695855,89238986,23,"Good catch! Thanks, fixed.",560812873,2016-11-23 00:22:45 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,8897968,822,false,5551325,37778098,6,Done.  ,299424082,2015-08-24 15:37:19 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,13677408,1642,false,5551325,58917153,39,Fixed.,420798151,2016-04-07 18:03:14 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,9426544,1048,false,1014305,42297347,92,Consider not passing in executor and using GrpcUtil.SHARED_CHANNEL_EXECUTOR,331834068,2015-10-16 20:35:18 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,9426544,1048,false,1014305,41198344,89,"Oh, I think I see, because you also have nsAuthority, which I assume stands for ""name server authority"". That is unfortunate... I'm not sure how to be differentiate those, since the alternatives I'm thinking about would also be confusing.",322066944,2015-10-05 19:11:20 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,24661424,3021,false,2667165,117813633,30,"Updated diff to include changes for Authenticator, which was originally intended separate diff.",696236098,2017-05-22 18:26:20 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,19693327,2526,false,2489413,92901808,6,done,575159265,2016-12-16 23:11:31 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,21998103,2791,false,1014305,104461538,8,"Go ahead and leave the `@ExperimentalApi` annotation, to show that we can actually delete it.",637508238,2017-03-06 16:45:27 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,21619375,2743,false,6634728,102837816,69,Done. Also fixed RoundRobinLoadBalancer.,628601600,2017-02-23 22:39:37 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,30233435,3604,false,1014305,147017179,31,"Simply say they must use grpc-java 1.4.0 or later and remove ""Conflicts w/ Embedded Tomcat"" from the table.",818509474,2017-10-25 23:51:49 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,15297934,1898,false,6634728,65971736,5,ditto for testing out `CallOptions` propagation,459858493,2016-06-06 21:22:38 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,26278382,3204,false,5551325,126541005,2,Was this intentional?,733956549,2017-07-10 21:24:10 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,16103160,2140,false,1014305,74789196,13,"It makes the method `final`. It used to be final in `AbstractStream2` but for making isReady() return `false` on cancellation it is now overridable. But it shouldn't need to be overridden in each transport.    Eventually, this method should probably also ",488018518,2016-08-15 16:28:13 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,30233435,3604,false,475246,147778117,29,done,818509474,2017-10-30 17:36:31 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,10397436,1201,false,6634728,44558947,48,"Please make the comment more accurate. ""this would likely return null"" -> ""this method would likely return null""",344317635,2015-11-11 16:21:29 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,24368700,2991,false,1014305,116873838,44,"Instead of this note, could we say that it matches case-insensitively?",693555246,2017-05-16 22:30:25 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,25196498,3064,false,1014305,121546570,1,This needs to move folder/package as well.,713221538,2017-06-12 22:54:55 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,21541745,2740,false,6634728,102585491,35,"Oh sorry, I must have gone out of my mind. The args are *consumed* by LB impls, so an abstract class as described in #2737 is most appropriate. ",627472018,2017-02-22 22:00:40 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,21541745,2740,false,6634728,102865883,12,Please keep the javadoc and add a link to the new signature.,630175732,2017-02-24 02:08:07 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,12736343,1506,false,9209972,56253317,32,This has been addressed in other place. See `ProtocolNegotiators` changes.,399758872,2016-03-15 22:37:08 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,24065311,2970,false,2489413,114388175,7,should also add `@Internal`,683621713,2017-05-02 18:19:16 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,18125118,2365,false,1014305,84938379,111,RFC 2817§5.3 says any 2xx response is successful. I do see that Netty is apparently accepting 200 only. It looks like [C core is following the RFC](https://github.com/grpc/grpc/blob/master/src/core/ext/client_channel/http_connect_handshaker.c#L168).,540970727,2016-10-25 16:01:25 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,9152707,996,false,5551325,39219761,13,Should these be noops?  Adding abstract methods to a public class will break people right?,307379649,2015-09-10 20:00:12 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,15016959,1868,false,5551325,64671397,5,"Whoops, fixed.",452596378,2016-05-25 23:38:11 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,33696686,3981,false,1014305,163428726,82,Alternatively:  The returned client stream is not yet _(or already)_ started.,896744035,2018-01-24 01:05:28 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,15531571,1952,false,1014305,68118786,97,And it looks like the usage in `inprocessTransportInboundFlowControl()` was completely useless since no path could call acquire when the count was below zero. I'll glance at that more and remove it if it is indeed unnecessary.,467006031,2016-06-22 19:27:47 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,10227966,1182,false,3664876,43677196,17,The entire class is marked as `@ExperimentalApi`.  I suspect that should be sufficient.,340084625,2015-11-02 19:26:25 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,36423041,4227,false,1014305,177270075,180,Why is this consulting `deadline`? I thought we agreed that `graceTimeInNanos` would be relative to the second GOAWAY.,957373945,2018-03-26 23:56:50 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,25708644,3119,false,2667165,132716185,73,edit: nvm I misunderstood why this was here,720039424,2017-08-11 15:35:37 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,23320604,2895,false,12473429,110787600,4,"```getSuperclass()``` returns ```null``` for Object or other base types that don't have parents, so this serves as the base case.    I've fixed style issue.",667356446,2017-04-10 23:42:24 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,8372394,619,false,5551325,34697985,102,Done.,279793163,2015-07-15 14:27:32 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,19382692,2479,false,6634728,92909882,218,"Please also have a test for name resolution success after an error, to make sure it can recover from it.",575292520,2016-12-17 00:58:56 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,7729762,495,false,1014305,31184665,2,Revert. There was no need to run gradle wrapper.,263456581,2015-05-27 19:51:12 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,17098694,2275,false,1014305,81355131,8,"If the tests don't pass without the change, then the version bump is required. Any time we are _forced_ to bump the version, we need to inform our users, since this dependency isn't tracked by maven/gradle. Bumping the version is fine, but we just need to",513448017,2016-09-30 14:57:58 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,15721610,2023,false,1014305,71625086,42,"Use JavaDoc here, and as a sentence:    ```  /** Simple client that requests a greeting from {@link HelloWorldServer}. */  ```",476555513,2016-07-20 23:28:32 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,9082774,892,false,3664876,38210054,107,why not just call `setListener`?,306715755,2015-08-28 13:11:58 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,21542610,2741,false,1014305,102848485,15,s/Sept/Step/,625165809,2017-02-23 23:45:36 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,26278658,3205,false,1014305,126486164,21,"> The hostnameVerifier is only used if an sslSocketFactory is set.    Actually, that's a bit misleading. You can use TLS without manually setting the `sslSocketFactory()`; grpc will just create one for you (in `createSocketFactory()`).",733854678,2017-07-10 17:29:21 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,10227966,1182,false,1014305,43676820,17,Do we want this to be `@Internal`?,340084625,2015-11-02 19:23:15 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,30621632,3647,false,6634728,148848862,103,"I wonder if this and its related logic can be removed.  It was needed because the old StatsContext didn't provide a way to tell if it's empty, thus the metadata was always sent. Now that you have implemented the optimization to skip sending metdata if Tag",825779846,2017-11-03 17:38:28 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,19382692,2479,false,9209972,90721191,239,I think we don't and this is copy-paste leftover. Fxied.,569478195,2016-12-02 21:17:11 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,8141876,562,false,3664876,34386921,27,"Yup, fair enough.  I said that realizing that there would be nothing else in a `context` package or module, which would seem rather odd. We can shelve this for now and defer to some later conversation on how to clearly identify what classes and interface ",279617295,2015-07-10 17:15:17 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,19382692,2479,false,7396743,90698249,94,question: should we remove `final`s?,569478195,2016-12-02 18:52:50 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,11909788,1368,false,1014305,51465506,85,I don't see any change that would address my comment.,381256757,2016-02-01 19:16:12 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,8141876,562,false,1014305,34583608,343,"Right, _because_ we aren't suppressing duplicate listeners, it seems remove should only remove one listener.    ```java  context.addListener(this);  context.addListener(this);  // Here `this` gets notified twice  context.removeListener(this);  // But here",279712618,2015-07-14 13:49:43 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,30866291,3667,false,1014305,149224059,4,"Note that the message has not been sent here. It is simply queued. If the remote is applying push-back, it could be a long time until the message is sent (which is why the previous code was delaying until the future completed).",829287937,2017-11-06 22:33:17 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,14441170,1793,false,6634728,62108843,101,Right. Reverted this line.,438780603,2016-05-04 20:29:00 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,20775600,2658,false,6634728,98025941,23,"No, it won't. Next version will still have two signatures, while `LoadBalancer2` will just be an alias of `LoadBalancer`.    At 1.1, we expect users of stock LoadBalancers to keep using the first signature, and users of custom LoadBalancers to migrate to ",606148516,2017-01-26 16:03:25 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,9117666,953,false,7000520,38791048,326,Compare code.,307022477,2015-09-04 18:30:21 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,19128551,2443,false,1014305,90083296,212,"This seems strange, but I'm willing to wait and see how it all fits together.",566347310,2016-11-29 19:05:11 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,8312845,680,false,3664876,36904633,28,"Agreed that this implementation is a bit hacky :).    Actually the more I think about it, I don't think what we really need is an `InterceptorFactory`, not `Interceptor`. The call to create an interceptor chain should just take a list of these factories w",279106016,2015-08-12 17:45:04 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,8312845,680,false,7689743,36154224,28,"I feel the design to make the interface a stateful abstract class is a bit concerning. In many cases, an interceptor chain can be created as an immutable object.    Two alternatives:  - keep the old design and drop implementation of CallFactory  - strengt",279106016,2015-08-04 01:11:00 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,23447666,2912,false,6634728,112490879,205,This could be just a singleton object.,673213885,2017-04-20 15:54:13 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,17079226,2274,false,6174876,78903848,433,can we simplify that logic and put it into a small method?,513016844,2016-09-15 07:30:58 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,27145413,3300,false,6634728,131272695,2,"In `LbHelperImpl.updateBalancingState()`, the state and the picker should be ignored if `loadBalancer != lb`, so that the channel ignores any updates from a balancer that has been shutdown and discarded.",752278103,2017-08-03 22:10:58 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,15811717,2067,false,7524125,73773771,304,changed to compare sendTime,486639952,2016-08-05 23:39:52 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,15811717,2067,false,1014305,73428746,171,"This should actually propagate out of this method. By suppressing the interruption here, it seems like readers could block forever via a race with `shutdown` being set to `true`.",486639952,2016-08-03 21:53:57 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,10407293,1202,false,6174876,44536266,13,I am using `directExecutor()` and not `newDirectExecutorService()`. Unsure why `newDirectExecutorService()` has been used so far mostly?,344721773,2015-11-11 13:21:33 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,7799656,505,false,3664876,31561549,136,Reorganized the test ... there is no longer a sleep.,265918343,2015-06-02 17:31:51 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,13771814,1656,false,6174876,59261707,29,`equals` or `stream.id()`,423416327,2016-04-11 19:02:27 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,7548905,435,false,7000520,30437011,41,Done.,258673446,2015-05-15 17:10:22 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,36314758,4217,false,2667165,174639894,12,"You're right, this needs to be volatile and set while holding the lock.",944059620,2018-03-14 23:27:02 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,29212379,3521,false,3695855,147808791,193,From our offline conversation with @ejona86 my takeaway was that this limited cache-control parsing is OK for inclusion in an example app (perhaps with a more prominent indication of what this does and does not handle in the documentation). There are obst,795612215,2017-10-30 19:24:55 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,8397056,632,false,6634728,34830375,223,What's the proper way to fail in the Listener? Throwing an exception?,279850070,2015-07-16 17:52:06 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,27884637,3381,false,1014305,134891205,9,Doh. Done.    When there's a failure you are sort of required to comment it out in order to debug where the failure is coming from. It's unfortunate.,767075027,2017-08-23 22:54:59 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,22810891,2858,false,1014305,108468814,120,Why get rid of the inner TaskRunner class?,656353557,2017-03-28 16:23:26 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,7092681,301,false,7000520,29183618,33,Done.,248496014,2015-04-27 17:50:05 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,9442940,1072,false,5551325,40448658,193,"Should this comment be updated in light of this change?  Specifically ""we avoid wasting resources getting the nanoTime() "" ",315897922,2015-09-25 14:31:58 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,8177821,574,false,6634728,33734589,12,@ejona86 I have added the old newCall() back to allow an easier transition for its callers.,278402569,2015-07-01 21:09:43 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,19706165,2513,false,5551325,92242329,235,@ejona86  declined PR #2385 on the grounds that StreamRecoder was going to be deleted.      You probably don't want to use it here.,575297378,2016-12-13 19:07:40 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,9117666,953,false,7147247,38802193,13,Removed,307022477,2015-09-04 21:20:34 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,9117666,953,false,7000520,38725726,261,Compare code instead.,307016446,2015-09-04 04:53:42 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,19128551,2443,false,6634728,90145233,151,Fixed.,566347310,2016-11-30 00:18:20 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,10397436,1201,false,6634728,44610351,128,This is awkward. Maybe just use a mock to return the proper authority?,345017656,2015-11-12 00:07:04 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,8216404,580,false,7000520,34090045,6,I added tcnative because the server would fail without it as:  ```  simonma@simonma-linux:~/github/grpc-java$ ./run-test-server.sh   Gradle is no longer run automatically. Make sure to run './gradlew installDist' or  './gradlew :grpc-interop-testing:insta,277496912,2015-07-07 19:00:52 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,21619375,2743,false,5551325,102832063,62,final,628601600,2017-02-23 22:10:26 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,21619375,2743,false,5551325,102833204,227,checkNotNull for visible constructor,628601600,2017-02-23 22:15:57 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,19128551,2443,false,1014305,90066749,264,s/the a/the/,566347310,2016-11-29 17:57:58 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,15588077,1977,false,5551325,68445626,100,Where do these numbers come from?  IIRC we allow user code to send pings too.  How do you tell your pings from theirs?,469089847,2016-06-24 18:55:53 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,30347318,3619,false,2489413,148060853,22,Done,822787613,2017-10-31 16:59:18 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,18311973,2386,false,5551325,88361548,41,There should be a ServerServiceDefinition overload here too right?,553811585,2016-11-17 00:17:10 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,13771814,1656,false,6174876,59256338,14,mehh nvm. it is documented :sweat_smile: ,423416327,2016-04-11 18:30:45 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,9144040,982,false,5551325,39183547,14,Done.,307356289,2015-09-10 14:52:48 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,7530929,431,false,6773014,30346484,43,Its definitely not. I've kept the baseline flush suppression and add a 'flush' param to the enqueue methods to accomodate this. Ill add the remaining explicit flush suppression in a follow up,256829053,2015-05-14 16:13:49 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,7799656,505,false,1014305,31533636,177,I'd feel a lot better if ctx.close() was also called here.,265918343,2015-06-02 13:15:27 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,7649713,472,false,3664876,30837546,11,"It appears this is available for OSX, linux, and windows. native-epoll, however is only available for linux.",261053386,2015-05-21 17:22:53 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,36839994,4266,false,6634728,177824522,46,The `unsafe` is already being used in `io/grpc/internal/CensusTracingModule.java`. Using it here doesn't make it any worse. It's your call.,957380639,2018-03-28 17:16:20 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,18022288,2353,false,2489413,87302925,255,done,548861309,2016-11-09 23:47:56 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,15242416,1897,false,1014305,65952338,6,"Ideally something like ""can be flattened into a single list"" and ""sublists are consider[ed] equivalent"" would be part of the method documentation and not the `@param`. `@param` is best when it doesn't grow too long.    That would also make it easier to go",458357339,2016-06-06 19:25:36 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,11909788,1368,false,1014305,51213701,9,It isn't really clear the format/meaning of name. Providing an example would go along way.,380458837,2016-01-29 01:08:00 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,24128328,2975,false,5551325,115050831,76,Please be consistent with underscores and dashes for name rules.  I think underscores are more common.,684960465,2017-05-05 17:40:10 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,6756105,225,false,1014305,27082107,51,package-private?,235805516,2015-03-24 22:01:41 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,6756105,225,false,3664876,27891051,181,spelling: GoAway,241411627,2015-04-07 13:51:14 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,22973573,2871,false,1014305,109266045,10,"`lifecycleManager` is used in `statusFromFailedFuture`, so it must remain a field. I left `keepaliveManager` because it is used by the test... although I agree that is questionable given the test didn't catch this bug.",659676706,2017-03-31 23:18:53 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,28534303,3454,false,1014305,141180876,32,"You can generally `@SuppressWarnings` for false positives like that, along with a comment saying we only mutate from one thread.",789456103,2017-09-26 20:52:33 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,25708644,3119,false,1014305,140920536,51,Make this a simple `boolean` field in this anonymous StreamingGreeterImplBase class. There's no need for synchronization and since we're already creating a class we can use a field instead of a final.,791110986,2017-09-25 22:56:48 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,26244607,3198,false,6634728,126194954,61,"This field aren't necessary any more. Since `storage` stays `null` after throwing, next time it's likely to fail and throw again.",731453061,2017-07-07 16:56:40 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,15886121,2089,false,1014305,72867333,134,Using a new channel each call is an anti-pattern. Maybe instead of we have a single instance in `RouteGuideActivity` (maybe initialized in `onCreate()`) and just shut it down in `onDestroy()`?,483734382,2016-07-29 22:02:32 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,27298519,3317,false,2667165,134257141,180,done,754630141,2017-08-21 15:11:21 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,8542530,644,false,6773014,35131638,306,When the transport receives a partial message and the application has not requested any messages yet we enqueue a Frame with stream==null & bytes to return.,282742488,2015-07-21 15:46:37 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,20309000,2588,false,5551325,95671341,7,"Yes, the extra finals are not needed. I secretly suspect that the final added to the class might need some transition period internally, so I don't want to lose the finals  in that case.  I would be happy to remove them once this is merged internally.",594982145,2017-01-11 21:03:34 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,20192009,2571,false,1014305,95016158,57,I don't see any value avoiding creating the small singleton for testing. But meh.,592375784,2017-01-06 20:40:28 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,15721610,2023,false,1014305,71624443,39,"We don't really want a public API like this. Instead, let's move this to `io.grpc.internal`, where it can remain public, but our users should know that they shouldn't use it.",476555513,2016-07-20 23:22:41 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,16396096,2184,false,9209972,75709564,14,"Ok, done.",496707687,2016-08-22 16:22:27 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,10843866,1259,false,5551325,46747270,63,Should this be an immutable copy of the list?,353186790,2015-12-05 00:01:22 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,11070710,1282,false,5551325,47587989,69,Should this return something?,360365905,2015-12-15 01:53:12 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,18096327,2360,false,5551325,85026152,48,Can there be duplicate method descriptors in here?,542442578,2016-10-25 23:49:43 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,7594214,446,false,3664876,30709607,296,done.,260230596,2015-05-20 12:46:49 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,20309000,2588,false,5551325,95705369,47,done,594982145,2017-01-12 00:41:25 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,10972789,1271,false,6634728,47306498,33,"> Since this is in the stream, it /should/ only get one set of headers, and it only live as long as the connection.    This needs to documented and enforced. Is `Stream.pickCompressor()` supposed to be called only once too?    > Now that you bring this up",357417038,2015-12-11 00:13:41 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,23236834,2881,false,1014305,110699615,41,Done,665152051,2017-04-10 16:19:22 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,24128328,2975,false,1014305,122553782,4,What is this target used for?,713460845,2017-06-17 00:05:22 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,7530929,431,false,6773014,30372103,2,Done,258329438,2015-05-14 20:58:09 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,14582820,1813,false,5551325,63404828,86,"Oops, forgot to rename.  Fixed.",446947278,2016-05-16 18:52:13 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,33147260,3917,false,2667165,160016652,129,done,880268629,2018-01-06 03:47:18 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,22105414,2805,false,9209972,104818103,5,"nit: Since it's a public class, maybe worth adding short javadoc?",640018775,2017-03-08 00:37:42 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,32634924,3879,false,2667165,165128031,38,"This got mangled when fixing the rebase conflicts, fixed.",904027407,2018-01-31 17:32:28 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,20676634,2639,false,12473429,98581428,10,I like this idea better.  Changed.,603690335,2017-01-31 01:18:01 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,32634924,3879,false,2667165,165126644,14,Removed stale comment,904027407,2018-01-31 17:27:51 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,28705474,3471,false,5551325,139272678,9,Consider moving the prefix generating method to here.,784527100,2017-09-16 00:33:57 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,7263220,338,false,3664876,29162753,16,that sounds interesting ... how complex would that change be? Should it be in this PR or a follow-on?,249258454,2015-04-27 14:25:04 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,8020085,542,false,1014305,32648081,5,"Since you added the parser, it is probably a good idea to test it at this time too. Otherwise I think we will start using it and not realize it doesn't have tests. Should be easy.",271803507,2015-06-17 14:51:37 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,30624851,3649,false,1014305,148374958,79,"Previously we weren't try-catching around cancel(). That honestly still sounds fine, but if you want the try-catch... sure. But I don't see any need for catching each type individually here.",824055053,2017-11-01 20:28:27 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,20519378,2615,false,1014305,96681060,23,Go ahead and have a `@Deprecated` and `@ExperimentalApi` `attributes()` method that calls the new method. That is very easy to do and makes it much easier to migrate.,599772111,2017-01-18 16:53:37 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,10418960,1203,false,6773014,45682128,59,"Agreed, removed and tidied up comment.",347905676,2015-11-24 00:24:51 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,7263220,338,false,6773014,29095007,5,Done,249258454,2015-04-24 22:08:25 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,13771814,1656,false,6174876,62482524,66,**the** end point,441120505,2016-05-09 11:13:19 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,13771814,1656,false,5551325,62097428,66,Why does the application need to keep track of whether the initial headers have been sent?  The idea of having a separate methods from writeHeaders is the right API abstraction.      Having this extra boolean seems wrong.  If the application has to keep t,438057689,2016-05-04 19:14:09 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,19382692,2479,false,6634728,92909731,233,"It would be simpler if you just saved the Status you created, and `assertSame` here.",575292520,2016-12-17 00:56:22 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,15655299,1997,false,5551325,69228114,5,Please include the rationale for this value in the javadoc.,471974673,2016-06-30 23:38:25 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,10781220,1248,false,1014305,46626096,233,No need to implement this. The default is NOOP. Ditto for onReady. Ditto for `startCallTreeServer`,351729874,2015-12-03 22:57:00 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,30233435,3604,false,475246,147777760,23,"ack & rewrote to ""if you are using""",818509474,2017-10-30 17:35:17 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,7312958,348,false,3664876,29442902,112,"For efficiency of applications that obey outbound flow control, I think that immediately calling back during a write (and requiring the application code to be reentrant) is probably the best approach, so long as the documentation is clear. WDYT?",251408330,2015-04-30 14:00:13 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,9157881,1005,false,5551325,39289122,19,"Derp, Done.",307418907,2015-09-11 14:29:20 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,15802880,2065,false,1014305,71257154,134,Can we use FINE here? Was using string concatenation instead of message formatting on purpose?,478267008,2016-07-19 00:52:10 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,14742942,1828,false,6634728,64461572,251,Maybe these two lines can be moved out of the synchronized block too?,449974087,2016-05-24 19:48:47 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,13771814,1656,false,1014305,62279848,72,"Trailers is graceful, cancel is an abort. Cancel is used for timeouts, for instance. I've copied part of the docs in `ServerStream.cancel()` and now say this is a clone of that method.",438057689,2016-05-06 01:30:46 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,20551858,2620,false,6634728,96743290,15,They should actually be package-private.,600402879,2017-01-18 21:56:41 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,6852840,252,false,7000520,27541517,59,"I'm not sure, I don't know much about the Ciphers, what I'm referring to is actually the Netty code in https://github.com/netty/netty/blob/8eddeb1ddd958c872a59cc111cf036ede92c4882/handler/src/main/java/io/netty/handler/ssl/JdkSslContext.java, I noticed it",238532067,2015-04-01 00:55:32 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,20551858,2620,false,1014305,96916452,15,Done.,600402879,2017-01-19 17:48:43 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,13771814,1656,false,1014305,62278450,97,I used the verbose name for sink because having additional sinks is highly likely. I went back-and-forth a lot on making additional sinks; I probably had multiple sinks ~5 times when developing this PR. It was important that I found a solution that could ,438057689,2016-05-06 01:09:02 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,15361873,1912,false,6634728,66695660,24,Please also switch terminology in the variable names in tests.,462705560,2016-06-10 23:56:09 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,7312958,348,false,3664876,29473176,6,Done.,251849414,2015-04-30 19:37:44 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,10227966,1182,false,3664876,43679503,17,"Ok, I don't feel that strongly here.  I'll make the change.",340084625,2015-11-02 19:46:19 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,10748830,1246,false,6634728,46496367,4,Also shut down loadBalancer?,351684915,2015-12-03 00:05:45 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,15588077,1977,false,5551325,68617538,103,How does this interact with user initiated pings?,470198737,2016-06-27 17:18:08 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,26275569,3203,false,2021277,126299398,43,"You could get the byte code of all involved classes, manipulate some or allof them and load them in an isolated class loader. Have a look at ByteArrayClassLoader.",732192776,2017-07-09 08:44:34 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,33807978,3986,false,2489413,164227204,182,"I think this test code covers it    ```java  assertEquals(            new RetryPolicy(                3, parseDouble(""2.1""), parseDouble(""2.2""), parseDouble(""3""),                Arrays.asList(Code.UNAVAILABLE, Code.RESOURCE_EXHAUSTED)),            retryPo",898779158,2018-01-26 21:32:10 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,24188131,2980,false,1014305,115775309,35,s/Thestub/The stub/,689221827,2017-05-10 15:36:21 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,7092681,301,false,1014305,28984360,4,Why do we need this?,248496014,2015-04-23 15:32:44 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,7833475,508,false,3664876,31821146,183,done.,266464511,2015-06-05 13:15:03 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,18022288,2353,false,2489413,85619578,110,done,538464702,2016-10-28 22:19:57 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,9426544,1048,false,1014305,41165113,46,"This doesn't look like a great idea to me. I'd much rather Netty handle this, especially since most of the SocketAddresses we expect to be passed to Netty are Netty-specific.",322066944,2015-10-05 14:28:32 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,10838610,1258,false,1014305,46738248,28,"Actually, it was trying to verify something that was good. And in fact, now I'm pretty certain there is a bug here because `listener.closed` _will_ be called twice. The test didn't notice because stream is a mock.    Apart from the bug, would you feel bet",353103667,2015-12-04 22:07:28 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,10969981,1269,false,1014305,47274477,68,Use Guava's `Ticker` instead?,357309222,2015-12-10 19:44:00 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,13654994,1637,false,6634728,58758269,86,"I don't have a preference between `compareTo()` and `isBefore()`.  @carl-mastrangelo, I understand your have a perspective for improving our test facilities to help our users, but I don't think the choice being made here is very related to such effort. I ",420366182,2016-04-06 18:35:13 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,22933014,2864,false,5551325,109033506,23,This is a different definition than NettyServerHandler users.  can you use the same constant in both places?,658881880,2017-03-30 20:48:30 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,15721610,2023,false,13308501,70157241,60,Implemented Drainable & KnownLength,475316300,2016-07-09 00:12:14 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,7799656,505,false,1014305,31633815,95,Initialize these at the declaration?,266158138,2015-06-03 13:14:32 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,36839994,4266,false,6634728,177603610,77,The return type can be `CallId`,957380639,2018-03-27 23:38:18 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,13220231,1570,false,9209972,56976943,144,Done.,411066714,2016-03-22 12:24:05 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,13893362,1677,false,3664876,60498268,199,"Again, just copying protobuf.  I assume there was some motivation here, but I don't know the history. But since we're trying to copy protobuf here, we should probably leave it.",430630149,2016-04-20 22:23:50 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,18022288,2353,false,5551325,84179759,9,"I know what 0 means, but it isn't obvious.  The reason to comment on it here is so that people have to go looking in other places to understand what this code is doing.  That slows down readability.  This is example, code, which means it should be as easy",537507468,2016-10-19 22:19:09 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,25584632,3104,false,2489413,122550954,10,I was thinking to delete it in the next release cycle.,716600997,2017-06-16 23:28:52 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,32352117,3859,false,5551325,156232148,8,the sizes are checked above,862177313,2017-12-11 23:26:34 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,30233435,3604,false,1014305,147017277,47,s/grpc-netty/grpc-okhttp/,818509474,2017-10-25 23:52:28 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,36839994,4266,false,6634728,177596325,76,Can this be private too?,957380639,2018-03-27 22:54:29 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,10920636,1264,false,1014305,46901660,4,It looks like we were failing to close the InputStream before. Start doing so now in this method?,356726682,2015-12-08 00:50:03 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,7564398,443,false,1014305,30536392,37,Change this to just a return statement; no need for an if since you are returning a boolean.,259685004,2015-05-18 16:49:21 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,9426544,1048,false,6634728,41310198,117,I added `AuthorityOverridingTransportFactory` to `AbstractManagedChannelImplBuilder` to handle authority overriding. Individual builders would not need to implement it.,322066944,2015-10-06 17:26:27 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,9426544,1048,false,6634728,41443858,66,Done.,325121767,2015-10-07 18:39:52 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,10971752,1270,false,5551325,47272639,19,"I only see newServerStreamListener used in one place, and its treated as a ServerStreamListener.  Since ServerStreamListenerImpl was private until now, no one could have known if it was generic or not.      I can make newServerStreamListener to keep the p",358070586,2015-12-10 19:30:26 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,32634924,3879,false,1014305,158358457,32,Grab the value from `builder.binlogProvider` instead of passing it in directly.,868161597,2017-12-21 19:24:33 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,25196498,3064,false,1014305,121449412,108,`t.getTrailers()`,711411466,2017-06-12 15:47:44 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,10154010,1174,false,3664876,43507255,39,Use the new constant in gRPC.,338579940,2015-10-30 13:26:42 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,7799656,505,false,1014305,31533967,104,Add a space after the comma.,265918343,2015-06-02 13:18:20 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,7799656,505,false,1014305,31633906,162,Why do you need multiple groups? Can't you just have a single one and share it between all usages?,266158138,2015-06-03 13:15:13 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,18664181,2410,false,5551325,87242926,123,I saw SSLException and IO Exception and just grouped it as exception.  Changed.,552386035,2016-11-09 17:51:32 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,20909918,2673,false,5551325,99022073,12,"millis are rather coarse, no?  I think it would be better if we used nanos for all time information throughout the library.  ",609725752,2017-02-01 23:24:11 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,33646030,3976,false,5551325,162700640,34,"Guava collections adds a large number of methods to our library, which Android users would not like.   Android users have a limit of 64K methods per java program, and Guava takes from 5-10K.   Proguard gets rid of most of them, but not the collections cla",890406438,2018-01-19 18:44:49 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,18311973,2386,false,5551325,86404410,99,"I would not make that assumption.  There is very little enforcement of that, if at all.  David's comments are borne from C++, which treats all protos as part of the binary and thus may do such deduplication.  Java does not.",546381369,2016-11-03 17:53:38 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,29283579,3529,false,1014305,143301265,43,"Word-wrap before `new`, not after (so keep `new CleartextHttp2ServerUpgradeHandler(` together on the same line).",797481534,2017-10-06 21:47:32 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,7263220,338,false,1014305,29093686,6,Revert.,249258454,2015-04-24 21:28:10 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,32634924,3879,false,2667165,164259823,46,Refactored,868161597,2018-01-27 02:11:28 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,13771814,1656,false,1014305,62280710,113,"The name of this class is more properly AbstractStream2.TransportState. When said that way it seems fairly obvious this is stream-specific state. I understand there are times it is necessary to stutter in class names, but I tend to limit to that to cases ",438057689,2016-05-06 01:49:21 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,8141876,562,false,6773014,34399198,182,Done,279630636,2015-07-10 19:45:18 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,36314758,4217,false,2667165,175235841,17,Done. This required updating some unit tests to ensure streams are not started until the transport is ready.,946129627,2018-03-16 23:27:38 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,7352120,367,false,3664876,29981015,13,Can you restore the comment WRT flushing?,254868279,2015-05-08 20:10:17 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,17034642,2262,false,6634728,82307861,62,Yes. Fixed.,525349349,2016-10-06 23:42:58 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,16705172,2221,false,6634728,77418351,32,"I would prefer this method to be merged back to `scheduleBackoff()`. Private methods exists for two reasons: to be reused, or to break up complicated task into smaller steps. Neither is the case here. Having a separate private method here only impedes cod",505775977,2016-09-02 22:07:36 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,16223983,2159,false,3664876,74775531,33,"@carl-mastrangelo we can do even better, but it requires a change to protobuf. Right now, this will cause protobuf to do another copy to its internal array ... we need to fix that.",492756169,2016-08-15 15:04:28 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,17034642,2262,false,1014305,81615359,91,Why is `methodName` now passed in?,521351028,2016-10-03 18:52:24 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,17034642,2262,false,1014305,79077599,92,"Is messageReceived supposed to be compressed size, or uncompressed size? If compressed size, then it _can't_ correspond to high-level messages (e.g., protos). If the event is supposed to be called _before_ application-level flow control (you want to repor",512070930,2016-09-15 22:41:20 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,16223983,2159,false,1014305,74850124,33,"> It gets access (in a roundabout way) to setting the protected bufferIsImmutable factory flag.    But are we actually using that? Based on another comment it seems like we aren't:    > \ 4. Copy from ""the buffer"" reading out into a ByteString or byte arra",492756169,2016-08-15 22:51:42 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,14870158,1846,false,372583,64512965,49,I thought you would but the class looked kinda awkward with some fields as options and custom fields in a map.  This felt cleaner and more consistent with Attributes and Context.  If you feel strongly about this I can rework this so the fields are kept.  ,449203119,2016-05-25 04:15:44 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,8372394,619,false,5551325,34497292,107,"That would complicate the cancellation logic outside if this method.  I believe immediate futures can be cancelled many times, so there could be a static ""no timeout"" future.",279698767,2015-07-13 16:48:40 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,9142451,977,false,3664876,39080209,14,Does this need to be experimental?,307290022,2015-09-09 16:41:19 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,8141876,562,false,1014305,33201405,87,"Returning a boolean sounds fine, with `true` meaning that this call caused a closure and `false` meaning it was previously closed.    If every Context can be closed, what is the behavior for the ROOT?",273716559,2015-06-24 19:53:47 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,9442940,1072,false,1014305,40399664,99,"Could TransportSet be lazy, like ManagedChannel was?",315897922,2015-09-25 03:00:19 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,13282068,1583,false,6773014,59234330,29,"Yeah, inclined to agree if only because we don't want our benchmarks to appear too exotic. Done",421448370,2016-04-11 16:20:49 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,9098047,919,false,1014305,38576917,147,"Hmm... this can cause multiple calls to `onChannelTerminated()` if two calls complete at the same time.    Hmm... This acquires a channel-wide lock per-call. We will probably want to remove that, but that can happen later.",306906962,2015-09-02 18:00:39 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,7483798,417,false,3402699,30753207,70,done,255429989,2015-05-20 19:47:14 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,30871298,3670,false,1014305,150114503,63,"They're equivalent here. But isA would actually be worse, because if I had the wrong class I could miss callbacks that I wanted to trigger failure. I'm not trying to verify it is an Attributes; I just checking the method which happens to have certain argu",832552849,2017-11-09 23:09:45 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,14676761,1821,false,5551325,63226298,38,Same here.,443192620,2016-05-13 18:05:01 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,8141876,562,false,6773014,34624353,566,Done,279750738,2015-07-14 19:50:34 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,19962990,2557,false,2489413,94083148,107,`@Nullable`? The same for other fields with a meaningful null value.,586167208,2016-12-28 22:12:47 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,15988840,2126,false,7524125,74467753,355,"For now just threw a RuntimeException, looking in to how to handle this",489424314,2016-08-11 17:41:25 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,18022288,2353,false,2489413,86259110,80,done,546154444,2016-11-02 22:43:19 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,8141876,562,false,1014305,34518895,250,We should have a code sample here with how it's expected to be used where the detach is in a finally.,279712618,2015-07-13 20:21:21 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,21468691,2736,false,6634728,103002491,183,All fields that are not intended to be changed should be final.,619764102,2017-02-24 18:30:53 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,15531571,1952,false,6634728,68106472,97,Why was the initial value 1?,467006031,2016-06-22 18:18:06 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,8372394,619,false,5551325,34497747,54,"A transport.ServerStream is a Call no?  Each ""RPC"" on the wire is a separate HTTP2 Stream, which is what a ServerStream is I thought.",279698767,2015-07-13 16:52:27 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,8391731,630,false,1014305,34849892,24,"The @ ThreadSafe follows the practice that I described: ""something isn't thread-safe unless it says it is thread-safe."" It sounds like better commenting of AbstractStream is in order (maybe by using @ NotThreadSafe) instead of adding the annotation here.",279847159,2015-07-16 21:33:34 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,13282068,1583,false,6174876,59610262,43,nit: `{@link MethodDescriptor.Marshaller}` and `Netty's {@code ByteBuf}.`,424853985,2016-04-13 19:29:49 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,7902595,519,false,1014305,32135418,27,"FYI, you only need a single backtick around code like this. I'm not suggesting you change it now, since there are many places this is happening in this file and that is the way it was before.",268928162,2015-06-10 14:16:47 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,7263009,337,false,3664876,29113944,7,nm ... this is just a test :),249285662,2015-04-26 19:28:40 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,8141876,562,false,6773014,34395410,292,I suspect that we don't. It would be unusual in Java to do that.,279630097,2015-07-10 18:55:28 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,18272030,2380,false,1014305,85456963,41,"This object can be filled by things other than codegen (yes, it isn't going to be common, but we don't special case codegen). How about something like:    > Returns a marshaller-specific object that provides additional information about the service. For e",543888054,2016-10-28 00:58:46 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,15634147,1992,false,1014305,69022983,200,"Avoid holding lock when running shutdown, to reduce chance of deadlock",471117031,2016-06-29 20:39:19 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,18022288,2353,false,2489413,87302913,379,done,548861309,2016-11-09 23:47:47 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,20309000,2588,false,5551325,95685462,51,Done.,594982145,2017-01-11 22:20:08 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,13677408,1642,false,1014305,58914609,39,With a dash it would be fine: non-multiple.,420798151,2016-04-07 17:47:49 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,8586229,672,false,3664876,35656699,74,"@ejona86 are you suggesting that this code be located elsewhere? If so, where ... in `TransportListener`?",283942301,2015-07-28 12:54:44 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,18908780,2427,false,7396743,88380161,454,can't this be `private`?,557829709,2016-11-17 03:19:58 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,35931931,4174,false,1014305,176274241,112,private?,940630739,2018-03-21 23:48:09 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,8470641,629,false,1014305,35034633,44,"Does it hurt anything if we pass an sslSocketFactory to OkHttpClientTransportFactory?    I'd be fine initializing sslSocketFactory to SSLSocketFactory.getDefault(), except I worry that the method may do a bit too much loading.",280318334,2015-07-20 17:38:32 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,12307686,1422,false,1014305,53228574,51,"Oh, neat. I like this approach to the API, where you don't have to provide the interceptors here.",389691455,2016-02-17 20:46:39 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,18022288,2353,false,2489413,84171616,78,"it does not make benefit here.   - ImplBase is an abstract class, `@Syp ImplBase serviceImpl;` will not work, still need initialize it:       `@Syp ImplBase serviceImpl = new ImplBase(){};`  - need add `MockitoAnnotations.initMocks(this);` in `@Before`.  ",537507468,2016-10-19 21:30:55 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,28666130,3465,false,1014305,139035418,5,"Let's use `false`, as that's the more common case.",783717474,2017-09-14 23:33:42 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,20909918,2673,false,5551325,99267294,65,unused?,611686107,2017-02-03 02:31:58 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,7955256,530,false,1014305,33302586,278,Don't we need to handle the error?,274348435,2015-06-25 18:42:19 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,12485970,1462,false,1014305,53712540,642,Adding a comment.,393770696,2016-02-22 23:31:15 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,27719359,3362,false,5551325,134025459,37,"The branch cut has happened, I think this should be 1.7",763384367,2017-08-18 18:26:42 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,18168140,2366,false,6174876,84622858,20,`@Nullable` ,541009487,2016-10-24 05:35:01 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,29042691,3497,false,5551325,140906137,1119,extra semi,791057285,2017-09-25 21:39:05 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,8936684,861,false,3664876,37801837,14,"Yes, good catch. Done.",299571454,2015-08-24 18:42:24 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,19844334,2544,false,6634728,94700551,6,Please also mention defaulting to channel setting if not set.,591170195,2017-01-05 01:32:41 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,7100184,303,false,3664876,28452872,46,sgtm,244765974,2015-04-15 17:17:58 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,19595793,2501,false,1014305,92522463,14,s/forcibly/forcible/ (or forced),575011370,2016-12-15 00:36:42 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,29819535,3580,false,3695855,147851492,46,"Oops, fixed",822989813,2017-10-30 22:22:54 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,26278382,3204,false,5551325,126257702,5,Could you please also update the Bazel files?,732147564,2017-07-07 22:26:26 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,8591804,677,false,1014305,35782619,4,When `t` is `null` it seems the Status should be OK. I think `t` is `null` when requested to shutdown (line 187) and when  the connection is closed gracefully (line 180).,284037498,2015-07-29 14:51:07 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,17034642,2262,false,5551325,82011870,77,What's to be done here?  ,525256808,2016-10-05 16:18:24 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,8397056,632,false,1014305,34827264,223,"If there are more messages, we need to fail. If you put in this optimization, then I think you also have to make sure to `request(2)` at the beginning and to fail appropriately if more than one payload is received.",279850070,2015-07-16 17:21:28 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,7665647,478,false,6773014,30925531,154,Probably not much advantage. Not sure 4 is really saving us anything either,261566368,2015-05-22 17:50:42 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,10407293,1202,false,1014305,45266249,64,"That is the most repetitive (non-code generated) set of indentation I've seen. If you put the public here on the next line, it could be even moar repetitive-looking!    (please don't to change; I just wanted to point out that I noticed :smile:)",348228610,2015-11-18 20:53:30 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,36839994,4266,false,2667165,177820592,76,Switched to public API,957380639,2018-03-28 17:03:09 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,21468691,2736,false,3695855,103315871,51,Done,619764102,2017-02-27 21:25:46 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,17034642,2262,false,5551325,81249607,135,fits on previous line?,521351028,2016-09-29 22:39:43 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,10397436,1201,false,6634728,44608999,64,"""foo.googleapis.com:8080"" will not trigger the exception. Please change it to ""127.0.0.1:8080"".",345017656,2015-11-11 23:47:20 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,7649713,472,false,3664876,30837044,5,Are these the only distributions available on maven central?,261053386,2015-05-21 17:17:42 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,9545626,1073,false,7689743,41193322,318,My guideline here is it something we can imagine to execute on server side. Followedby and transform (with a restricted transform function) seems to me. I agree we should not re-invent all the combinators of Rx/Java 8 here.,317052175,2015-10-05 18:30:05 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,14259244,1724,true,2489413,61324366,16,Agreed. Used real NCB instance now.,434960299,2016-04-27 19:52:16 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,17079226,2274,false,5551325,78918166,59,"Ack to removing it.      As an aside, my almost-there interpretation of how inlining works is that there is some sort of ""budget"" that causes methods to be inlined.  Specifically, if a chain of calls is short enough all of them get inlined, but may not if",513016844,2016-09-15 09:01:13 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,19753440,2532,false,3695855,96092207,25,Done,595563418,2017-01-13 23:10:25 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,14261900,1726,false,5551325,61465331,5,"The package name was wrong to begin with, and breaks internal proto db.  This change makes that wrongness more apparent.  It will have to be fixed in other places, but only because we have a ton of copies rather than one true copy.",435098903,2016-04-28 17:09:05 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,19341786,2475,false,2489413,90564477,2,SPLITER?,568665869,2016-12-02 00:03:40 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,22477898,2838,false,6634728,107449566,5,"It's just defined by the implementation, but not what we really want. Calling it undefined means we don't support whatever the current implementation is doing and we are free to change it in the future.",647807917,2017-03-22 15:41:33 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,24116958,2974,false,6634728,114674648,6,"@bogdandrutu for now we could provide accurate wire size and timing at the same time. But soon with stream-wide compression we will be left with two options:   1. Provide accurate timing only. NetworkEvent could be added for each message, but the actual w",684690033,2017-05-03 23:15:26 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,19595793,2501,false,6634728,92528941,94,"IDLE only transitions via CONNECTING to READY. There is no direct edge from IDLE to READY.    I think we had the conversation WRT initial imbalance, and we thought it was acceptable.",575011370,2016-12-15 01:41:25 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,30233435,3604,false,475246,147778033,27,done,818509474,2017-10-30 17:36:13 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,8770292,796,false,1014305,36875792,4,Shouldn't this use the same indentation as the line above?,293390123,2015-08-12 13:45:21 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,30621632,3647,false,6634728,148846697,20,These two methods should take the form of the corresponding methods in the builders.,825779846,2017-11-03 17:30:08 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,8141876,562,false,1014305,33203130,41,I'm concerned that this would create an incentive to create multiple keys with the same name but different default values.,273716559,2015-06-24 20:12:53 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,9095090,914,false,1014305,38437674,15,This should be ManagedServer,306823279,2015-09-01 14:08:41 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,8647188,669,false,3691158,36647435,43,"cool, that does simplify the code.",284955237,2015-08-10 13:53:11 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,35989747,4183,false,1014305,172980852,6,Done,937379785,2018-03-07 20:52:52 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,14742930,1827,false,6634728,65470196,16,"Maybe attach msg.getStatus().asException() as the cause of this UNAVAILABLE status, and also use it in transportReportStatus()? This keeps the most information and makes the event chain more obvious.    I don't have an opinion between UNAVAILABLE or CANCE",446545773,2016-06-02 01:06:50 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,7954529,534,false,3664876,32318177,12,"Does the two-arg version use `voidPromise`? If not, it probably should.",269851232,2015-06-12 12:03:23 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,27145413,3300,false,2489413,131031017,18,Good point. Fixed,751516233,2017-08-03 00:41:13 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,6470998,156,false,1014305,25624851,12,Created https://github.com/aantono/gradle-plugin-protobuf/issues/23,224334361,2015-03-02 17:44:26 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,8177821,574,false,6634728,34002046,54,Done.,278402569,2015-07-06 23:50:03 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,15988394,2115,false,7147247,73438465,13,"Consider adding some comments to these fields to avoid confusion. For example, what's the unit for elapsed. Is it bits or bytes for mbps?",486511140,2016-08-03 23:13:52 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,21468691,2736,false,6634728,101879696,60,Remove `public`.,619764102,2017-02-18 01:46:34 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,13306021,1587,false,5551325,57353519,55,"If you are going down the builder route, might as well use the (TimeUnit, amount) pattern that is common in the rest of java.",412817633,2016-03-24 17:22:26 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,6756105,225,false,3664876,26947162,148,You could probably also just called the super method in this case.  Maybe change the first if to `if (existingStream(streamId) || connection().isGoAway())`,234043527,2015-03-23 14:31:22 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,15660140,2000,false,5551325,69326899,68,nit: extra line,472197497,2016-07-01 16:47:04 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,6756105,225,false,6174876,27913310,115,@nmittler it was @ejona86's idea :-).,241411627,2015-04-07 17:52:26 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,8542530,644,false,3664876,37246263,77,Indicate only used by transport thread?,282742353,2015-08-17 20:46:49 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,13163276,1566,false,1014305,56845367,4,"final, and add another argument to the constructor for it.",409515775,2016-03-21 15:49:55 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,28368010,3439,false,6634728,138208319,205,"I see. I have moved the lines that reference into `start()`, and create `LoadReportingTask` every time it's scheduled instead of re-using one.",777312861,2017-09-11 22:23:52 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,15897963,2093,false,5551325,74519519,127,Should there be a check here to see if it is already pinging?,489166821,2016-08-11 23:02:56 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,19382692,2479,false,6634728,91845271,102,"No, the initial state is always.  There won't be a notification for it.  I will make it clear in the documentation.",573201162,2016-12-11 00:29:14 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,15988394,2115,false,5551325,73445097,118,Is JSONObject lazy?  Will it skip parsing most of the data until it is asked for?,486511140,2016-08-04 00:21:36 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,27933733,3395,false,1014305,139563892,502,s/INFLATE_BUFFER_SIZE/inflaterInput.length/,782024955,2017-09-18 23:15:17 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,27477168,3339,false,1014305,132798805,12,"Oh, then make your own answer to call fakeClock directly? (Don't use `delegatesTo()` in that case)",758194258,2017-08-11 23:03:38 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,15811717,2067,false,7524125,73773778,52,also removed,486639952,2016-08-05 23:39:58 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,24658694,3019,false,1014305,122816428,48,No need for LogExceptionRunnable. This isn't schedule().,713281772,2017-06-19 20:32:43 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,20505910,2611,false,9209972,96690414,67,"Good call, fixed. Reshuffled and changed first commit, which is now last (might be worth to merge those fixes as a separate commits, that's why I'm keeping them separate - your call)",599578461,2017-01-18 17:32:44 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,24658694,3019,false,6634728,119728398,43,"I think `notifyWhenStateChanged` is more accurate, as it implies the listener is one-shot. `addLIstener` sounds like the listener will stay after being called.",701038479,2017-06-01 21:04:06 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,19382692,2479,false,6634728,93282879,38,You probably also want to verify that `pickSubchannel()` actually returns `subchannel`.,580003685,2016-12-20 17:14:47 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,15811717,2067,false,5551325,72350514,32,queueLength,483011045,2016-07-26 22:32:41 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,20909918,2673,false,5551325,99186053,73,"Hmm, you are right.  The spec was updated that the path should have the leading slash.  Some places add it, some does not. This is going to be confusing.    https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-HTTP2.md",609725752,2017-02-02 18:24:35 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,13220231,1570,false,9209972,56976926,162,Fixed.,411066714,2016-03-22 12:23:58 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,7530929,431,false,3664876,30325836,128,Why not just flush at the end?,256829053,2015-05-14 12:39:17 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,25231954,3068,false,2667165,120980020,29,"The `ServerStream` API states that close() will close the stream for reading and writing, but did not specify what happens if we keep interacting with it after calling close(). `InProcessTransport` and `AbstractStream`  happen to both ignore all interacti",710444922,2017-06-08 19:39:26 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,6756105,225,false,6174876,27240389,242,@ejona86 sames as above.,235805516,2015-03-26 17:14:36 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,13282068,1583,false,6174876,57527565,135,"@louiscryan I believe we don't want a poisson distribution, but an exponential distribution here. See http://stats.stackexchange.com/questions/2092/relationship-between-poisson-and-exponential-distribution    `The distance between two consecutive points o",413592235,2016-03-27 12:23:19 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,11697710,1327,false,1014305,50324514,154,"It shouldn't be necessary to trust the CA of the client cert, even on the client.",375564997,2016-01-20 21:47:12 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,15897963,2093,false,7524125,74831433,98,"yup, removed this if",489166821,2016-08-15 20:44:40 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,12820112,1526,false,5551325,55607214,261,"Ok, just wanted to make sure this was intentional, not a side effect.",403323656,2016-03-09 23:08:45 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,10102303,1154,false,6634728,43177276,50,"This is not ideal. Based on @ejona86's suggestion, I have created #1158 and will abandon this one.",337329353,2015-10-27 18:56:45 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,15886121,2089,false,7147247,72865240,144,I've moved the channel into GrpcTask and pass stubs in the GrpcRunnable.run so it's not needed to mutate RouteGuideActivity fields.  Also made all the GrpcRunnable.run implementations to correctly throw exceptions instead of just logging them.,482532263,2016-07-29 21:42:42 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,18908780,2427,false,9209972,88391851,57,Would it be more semantically correct if we stored `Status.OK` here and renamed `error` to `status` ?,557829709,2016-11-17 06:09:06 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,15811717,2067,false,5551325,72351130,61,"client uses server socket?  and server uses Socket?  Might be worth a comment, since there are two clients and two servers in a proxy.",483011045,2016-07-26 22:37:12 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,35931931,4174,false,2667165,176577463,287,Changed to byte[]. I created a special marshaller and InputStream to avoid making another copy of the data. These will be private classes.,940630739,2018-03-22 21:27:15 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,24664357,3022,false,5551325,117384032,7,"The check for null should go here.  metadata uses a lot of linear time accesses, so doing it twice is reaching.",696281781,2017-05-19 00:41:58 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,6464593,153,false,1014305,25579925,42,"Bah, you're right. And that is also why you had to redeclare set and setException in order to give visibility to UnaryStreamToFuture.    LGTM",224015878,2015-03-02 05:16:21 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,24664357,3022,false,3695855,117899798,10,Indentation fixed.,696318396,2017-05-23 05:24:45 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,34746996,4061,false,5551325,167369492,77,Done.,909929833,2018-02-09 23:09:30 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,36081051,4196,false,6634728,173573974,5,We can probably instead check channelStateManager.getState() again here.,938938966,2018-03-09 21:34:30 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,18908780,2427,false,6634728,88508390,509,Removed.,557829709,2016-11-17 17:55:02 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,6647549,197,false,1014305,26397930,45,"Netty seems to use IndexOutOfBoundsException. Okio seems to use ArrayIndexOutOfBoundsException, which extends IOOBE.    But yes, I agree that if they both used something different making this RuntimeException would be very appropriate.",229419033,2015-03-13 15:02:36 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,7560239,438,false,1014305,30434837,13,"This is strange. I'd prefer to not have it, and it seems unnecessary.",258671726,2015-05-15 16:46:22 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,19709543,2530,false,6634728,94169010,597,"If `newCall()` is called after the channel is terminated, the call should fail, but how should we deliver the failure? Currently we deliver the failure to the call listener, which requires the app executor. As we shouldn't use the original app executor af",586460237,2016-12-29 19:04:07 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,10227966,1182,false,1014305,43678102,17,"Oh, unless you are saying that `NettyChannelBuilder.protocolNegotiator` should also be `@Internal`, because if so, I agree with that.",340084625,2015-11-02 19:34:21 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,25944867,3145,false,3695855,128833808,88,"Done, and added test case to AbstractServerStreamTest. It seemed to fit better there than in the abstract transport test, as it's fairly low level.",724578548,2017-07-21 18:42:45 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,7954529,534,false,6773014,34290129,5,Done but I need to make it public in AbstractStream so it can be called by the handlers.,276388403,2015-07-09 16:55:14 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,32144857,3839,false,12722654,155857782,9,"I suspect it's probably easier to have a per-channel limit.  Otherwise, we need to introduce a global lock of some sort, which we don't otherwise need.    For example, in C-core, this limit would probably be introduced via the ResourceQuota mechanism, whi",857895056,2017-12-08 19:36:28 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,25973758,3151,false,3695855,124616697,4,"I think this should use proto-google-common-protos, not grpc-google-common-protos. See https://github.com/grpc/grpc-java/issues/2961#issuecomment-298370880",725272415,2017-06-28 18:17:00 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,16893769,2240,false,3664876,78084029,66,+1,508827215,2016-09-08 20:36:33 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,13679378,1641,false,5551325,59309441,50,"Optional: You can use Junit4's ExpectedException, which lets you capture both the Exception class and match the toString() of it.",423647366,2016-04-12 01:32:57 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,35931931,4174,false,1014305,176279092,287,"Using InputStream might be incompatible with retries, as retries need to serialize the message multiple times. That's fine in a test, though.",940630739,2018-03-22 00:21:10 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,17079226,2274,false,5551325,79055108,461,I think they are prevented from being non binary from the transport.  If not I can force them to be.  We enforce it when setting from a key. ,513543951,2016-09-15 20:32:30 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,9109657,902,false,6773014,38681087,29,The project name is 'android' which is not what we want here and we cant override it,306959416,2015-09-03 16:39:45 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,9096416,894,false,5551325,38668264,29,"ChannelImpl, ClientCallImpl, MessageDeframer, and MessageDeframer.  They use a mix of != and ==, in order to be able to use null as well.",306839501,2015-09-03 14:53:39 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,27933733,3395,false,3695855,138509103,505,Done,776359433,2017-09-13 01:59:05 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,30722719,3656,false,2489413,154162797,420,Will do it in a follow-up PR.,850106016,2017-11-30 18:35:06 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,21619375,2743,false,5551325,102832920,175,"This should have been illegal argument exception, not illegal state.",628601600,2017-02-23 22:14:30 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,10135575,1169,false,5551325,43336056,13,"Ah yes, you are right.  I am thinking of a different but ongoing issue also with this file, which exhibits the 1-3 ping-ponging.    In that case, it seems like you would want the verifier to fail on any number other than 0?  Perhaps a Captor would be more",337958699,2015-10-28 23:16:31 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,16842829,2235,false,5551325,78047396,22,"followup CL, this one is fine.",508306097,2016-09-08 17:04:35 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,36131846,4205,false,2667165,173609604,195,done,939951342,2018-03-10 03:02:40 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,23665084,2933,false,3695855,112572115,31,My mistake. I didn't know toBuilder() existed. Fixed.,674828894,2017-04-20 22:13:06 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,31844380,3809,false,2667165,155684018,18,done,851112391,2017-12-08 01:11:38 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,24619849,3016,false,5551325,118364084,47,"Can you describe a little more why you choose this structure?  It seems like for the change you are making to the SUT needs just one new test method, rather than splitting the whole test class.",704577839,2017-05-24 21:03:03 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,27933733,3395,false,3695855,139775180,479,Done,782024955,2017-09-19 18:19:44 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,30978355,3695,false,3695855,150109788,40,Done,831632273,2017-11-09 22:45:42 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,9109657,902,false,6773014,38337760,4,"Odd, it's used in buildTransportServer",307835019,2015-08-31 15:47:15 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,9109657,902,false,6773014,38351815,83,"Seems reasonable, I'll see how that looks",307835019,2015-08-31 17:53:13 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,15213150,1895,false,1014305,65627894,18,"This line can be moved before the try, which will also prevent prevCtx from being `null` and throwing an exception in `detach()`",457582662,2016-06-02 22:10:16 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,27477168,3339,false,1014305,132796922,105,"Everything calling _schedule_ should be safe to delay, because it is based on time. It seems every usage of schedule should be able to use the fake clock, with the possible (unlikely) exception of when something is scheduled with 0 or negative delay (in t",758194258,2017-08-11 22:44:17 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,25574357,3098,false,1014305,122808096,5,What's with these changes? Were they just reordered?,718334288,2017-06-19 19:57:34 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,7295443,342,false,3664876,29182951,230,Maybe rename `lambda` -> `targetQps`?,250285117,2015-04-27 17:42:39 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,25708644,3119,false,2667165,138666916,69,"To be more precise, the onReadyHandler executes on a thread pool donated by the user application. We have a default thread pool if none is passed into `ServerBuilder.executor`. The thread pool is used to create sets of serialized executor queues, one for ",781224940,2017-09-13 16:11:08 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,16134367,1996,false,3664876,69307416,69,"FYI, I think the [SimpleChannelPromiseAggregator](https://github.com/netty/netty/blob/4.1/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2CodecUtil.java#L218) is probably the way to go here. Perhaps we should make that a top-level class in Net",471772070,2016-07-01 14:27:32 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,16134367,1996,false,21077,73055353,91,@buchgr I think you also want to override `close(...)` and `disconnect(...)` and ensure that the buffer is written before you process these.,485134069,2016-08-01 21:21:32 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,8770486,790,false,6634728,36896439,35,How about annotating it with `@Internal`? `@Internal` itself will be annotated with `@Internal` too.,293396474,2015-08-12 16:32:23 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,12004743,1379,false,1014305,51607538,9,"No, I'd rather the compiler help verify that each condition block sets the value.",382736088,2016-02-02 18:01:20 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,9132816,966,false,6773014,38981114,23,We're now re-entrant safe and we don't need to protect against being multi-threaded in this runnable as the executor is serializing,307186857,2015-09-08 19:13:51 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,7670429,484,false,7000520,31192858,38,Yes.,261882147,2015-05-27 22:00:23 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,15988394,2115,false,5551325,73444759,153,"Don't do this.  If your benchmark creates garbage, it has to pay the garbage collector.",486511140,2016-08-04 00:18:15 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,16842829,2235,false,6174876,77869608,167,"I wanted to keep it so in case of changes to the headers we can undocument it and re-evaluate the memory usage. I only commented it out, so that we don't have the JOL dependency.",508306097,2016-09-07 17:37:09 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,7564398,443,false,1014305,30536354,37,Let's not bother with the streamId >= 3?,259685004,2015-05-18 16:48:52 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,26950081,3287,false,1014305,129919661,14,I'm not excited about having a very different code path during the race vs after (with this case being after). It makes it all the more difficult to find bugs during the race.,746894505,2017-07-27 18:19:35 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,25574357,3098,false,1014305,122809366,51,"I'm not excited about how far away from the usages these are. OkHttp in particular would be very easy to put the discards near where the other keys are added. With Netty, the filtering could happen in GrpcHttp2OutboundHeaders.",718334288,2017-06-19 20:03:15 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,7564398,443,false,1014305,30536532,59,"This should only be done if we don't call onError(). (i.e., it'd be an `else`)",259685004,2015-05-18 16:50:51 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,23547444,2923,false,5551325,111827505,84,protect behind an `isLoggable` ?,672290571,2017-04-17 21:36:08 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,17079226,2274,false,5551325,79024187,321,Done.,513016844,2016-09-15 17:56:35 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,28534303,3454,false,1014305,140618649,30,"This is internal, no need to label experimental.",789456103,2017-09-23 00:08:59 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,7560239,438,false,3664876,30448753,13,"Yeah, I recall making a similar comment on a previous PR.",258671726,2015-05-15 19:45:38 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,9109657,902,false,6773014,38666797,21,Extending OkHttpChannelBuilder would have the undesirable effect of making it's signatures part of a stable API which is what we're explicitly trying to avoid here.    We could drop the ChannelBuilder interface for the moment  as we don't need to dynamica,306950698,2015-09-03 14:38:55 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,28503257,3453,false,3141479,139609382,7,Actually i don't think it is needed for the tests at all. I will drop it.,785396534,2017-09-19 06:54:03 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,28534303,3454,false,2667165,146981368,39,Deframing happens on application threads so we can't easily avoid synchronization the same way we can for framing.,816495903,2017-10-25 20:44:00 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,10972789,1271,false,5551325,47422438,33,Was the comment I added not what you wanted?,357417038,2015-12-12 00:46:37 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,8910546,836,false,3664876,37533816,17,done.,299232660,2015-08-20 12:16:53 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,6756105,225,false,1014305,27307605,59,No space after the >. :-)    https://google-styleguide.googlecode.com/svn/trunk/javaguide.html#s7.1.2-javadoc-paragraphs,236951214,2015-03-27 15:15:20 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,13315543,1592,false,1014305,57488224,5,"Mentioning ""system clock"" is a bit strange, although it could be fine. You might consider something like, ""If there is no time remaining, the returned duration is how long ago the deadline expired.""",413486094,2016-03-25 20:38:11 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,34780900,4066,false,1014305,168086799,57,"Also `rmdir ""$LOCAL_MVN_TEMP""`?",917027269,2018-02-14 06:34:38 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,16893769,2240,false,1014305,78112537,95,"Oh, I see. Each is being tracked separately. I think I'd prefer it being implicit and unconditional, because otherwise it's a pain to deal with in each method.",508827215,2016-09-09 00:24:41 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,20816402,2667,false,1014305,98314472,133,"Comparing to protobuf doesn't help the discussion. It doesn't matter what protobuf does because it could not have done what I'm describing. If I was making the protobuf builder I would have done exactly like they would have, because there is no other opti",607154927,2017-01-28 00:20:08 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,22810891,2858,false,5551325,108497735,165,Done.,656353557,2017-03-28 18:19:10 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,10467687,1207,false,5551325,45413057,54,"The problem with this is that its harder to test.  The Runnable is created and run in a way that is inaccessible to a test.  It is really hard to tell when the listener is added (explicitly, and in a controlled way).      Thoughts?",347270268,2015-11-19 21:49:06 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,18022288,2353,false,2489413,84170890,70,done,537507468,2016-10-19 21:27:08 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,11165431,1294,false,5551325,48274106,14,Updated docs.  I don't think it is feasibly to not call the listener from start.,363384000,2015-12-22 17:03:02 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,17205983,2286,false,6634728,79741925,73,Changed to create lazily.,516032115,2016-09-21 00:36:09 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,29111872,3511,false,5551325,143313310,108,"Fair enough.  I was hoping that the behavior was identical, which is why I didn't bring it up.  ",801798584,2017-10-06 23:40:46 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,8745738,697,false,1014305,36659417,57,"It could, but I'm not sure how much point to it there is, since either the value passed to `shutdown()` is `connectionStatus` or `connectionStatus` will be ignored.",292937036,2015-08-10 15:32:17 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,16396096,2184,false,6634728,75967189,64,checkNotNull for attributes.,498347654,2016-08-23 22:58:52 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,11120285,1289,false,1014305,48180859,4,"@madongfly, should we use BiMap in core/? Would that disappoint some of our Android users?",361957235,2015-12-21 19:29:09 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,6510455,166,false,1014305,25952742,48,This doesn't seem to follow https://github.com/grpc/grpc-common/blob/master/PROTOCOL-HTTP2.md,225434592,2015-03-06 14:42:36 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,28534303,3454,false,5551325,141275501,136,final,793609905,2017-09-27 08:33:53 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,8912535,837,false,5551325,37467176,125,Does serializingExecutor need to be released too?  It still has a reference to it right?,299044393,2015-08-19 18:58:33 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,23362074,2903,false,2489413,111501410,77,done,668197261,2017-04-13 22:36:34 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,17034642,2262,false,5551325,82301123,62,does this fit on the previous line now?,525349349,2016-10-06 22:44:38 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,6756105,225,false,3664876,26998650,82,"let's just call this something simpler, like `delegate`.  WDYT?",235431921,2015-03-24 01:07:28 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,7158157,313,false,1014305,28822658,9,"Looking at this some more, it doesn't seem there will be any performance difference between the two. So I do think I would prefer us improving OutboundFlowState.writeBytes().",247337189,2015-04-21 19:10:30 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,17034642,2262,false,5551325,81250746,152,Please clarify what should happen if bytes is 0,521351028,2016-09-29 22:48:14 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,11622315,1321,false,1014305,49880098,27,"To communicate which calls produce which exceptions, since we are dealing with `RuntimeExceptions` here.",373399006,2016-01-15 17:27:10 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,13306021,1587,false,5551325,57353731,111,"Typically builders check if arguments are valid on build, rather than on set.",412817633,2016-03-24 17:23:29 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,7530929,431,false,3664876,30425582,96,sgtm,258359080,2015-05-15 14:55:30 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,20547461,2618,false,6634728,99884095,75,"For my own record, the issue is `setStream()` may be scheduled for an unbounded period of time into the future. For example, `CallCredentials` may take a long time to fetch the credentials before triggering `setStream()` (in `MetadataApplierImpl`), prior ",600368625,2017-02-07 17:49:25 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,8321297,794,false,5551325,36812500,87,Increase consistency across the code base.  Other places in the code already do this as precedent.,279282297,2015-08-11 21:32:59 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,21864681,2771,false,1014305,103736581,13,Hint (no need to change): you can mark the method as `@Deprecated` instead of suppressing the warning.,634682382,2017-03-01 17:08:11 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,15811717,2067,false,5551325,72352273,124,why sleep?,483011045,2016-07-26 22:46:19 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,13533897,1627,false,5551325,58568837,69,"Yes, but since this code doesn't actually use it yet, it would hurt our coverage numbers.  Added a TODO to add one.  It should be easy to copy paste when it is needed.",417836487,2016-04-05 16:20:43 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,30984870,3699,false,1014305,150051411,183,Would you mind assigning these in the same order each time? So this would be the last line of this block.,832332777,2017-11-09 18:46:14 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,22181325,2811,false,1014305,106272246,31,This looks unnecessary. Remove the logger import?,641596159,2017-03-15 20:18:34 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,14870158,1846,false,372583,65419504,27,You're right.  I pushed an update.,452667311,2016-06-01 18:44:55 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,17034642,2262,false,6634728,78774932,92,"This is problematic. I wanted to have `messageReceived()` called once for each message, so that if tracing will want to expose message reading events, it will get it right. Now it may be recorded as multiple messageReceived events, depending on how fine-g",512070930,2016-09-14 15:39:49 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,21341848,2723,false,1014305,101545972,6,"I'm not trying to resolve FindBugs notices in this PR. And given that the equals and hashCode throw an exception unconditionally, it seems that it isn't too much of a concern.    The only reason I added static here is that if I don't the build will fail b",619012007,2017-02-16 15:32:12 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,7665647,478,false,6773014,30922784,32,"Not sure, the concept is pertinent for things like the Marshaller. Im inclined to keep it here",261566368,2015-05-22 17:08:48 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,9118649,961,false,5551325,38979967,69,Integer.compare,307025092,2015-09-08 19:03:44 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,18908780,2427,false,1014305,88390828,289,"Just call `handleTermination` here? Ditto in `transportTerminated`? I'm still digging into the threading, but it seems like running the executor is assumed to be safe in `gotoState()`.    Honestly, I don't care too much whether it stays the way it is, but",557829709,2016-11-17 05:54:52 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,17079226,2274,false,5551325,79057766,461,"This is in the toString method right?  Do you care that much about this being correct?  This ctor sets all the high bits in the char array to be 0, which will just show up as random charcaters.  Is having the hex output that valuable?",513543951,2016-09-15 20:45:34 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,15988840,2126,false,5551325,74512588,218,"Avoid personal pronouns in comments, they get out date soon when multiple people are editing the code.",491824046,2016-08-11 22:05:08 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,15988840,2126,false,5551325,75516366,2,here too,496663843,2016-08-19 17:01:04 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,35063190,4093,false,2667165,169184870,55,"`awaitTermination` in the forwarding class is a nice way to do this, we can remove the interface as well.",919451753,2018-02-19 22:46:33 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,29199329,3518,false,1014305,146094781,5,This is a different version than used elsewhere.,814398302,2017-10-21 02:49:25 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,8382399,625,false,1014305,35270625,174,"Acquiring the lock only once greatly eases proving correctness. I don't see the benefit of only calling `onReady()` from one place outweighing the greater difficulty in auditing. It seems the ""simple function"" doesn't really help the methods that are call",279908164,2015-07-22 20:12:38 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,15616315,1989,false,5551325,68787611,74,"would this be simpler as a for loop over queue?    I see that there is a lock, but it seems like it would make more sense to atomic compare and swap the current queue with a shadow queue, and avoid the copy altogether.",470590070,2016-06-28 16:03:14 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,20612811,2634,false,5551325,97177221,6,is this correct?  how come the project(':grpc-core') dep above is not enough?,601127426,2017-01-20 23:39:21 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,29199329,3518,false,1014305,160555686,20,Why use this? Why not just pick one of jcenter or mavenCentral?,871701106,2018-01-09 23:39:45 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,8286534,665,false,1014305,35452755,151,This needs to be done with the lock held.,278833911,2015-07-24 16:36:07 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,9109657,902,false,7000520,38338112,83,"So there are three types in io.grpc.netty.NegotiationType: `TLS`, `PLAINTEXT_UPGRADE` and `PLAINTEXT`, why don't we move it to io.grpc package for all transports use? Is there any transport-specified negotiation type expected in the future?",307835019,2015-08-31 15:50:13 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,25944867,3145,false,1014305,126021518,39,"Please extend ServerStreamListenerBase instead of using a mock with the Answer. Ditto below in this same file. (It looks harder in other files, so I'm not asking for that.)    The implementation can still be in-line if you want.",724578536,2017-07-06 21:31:58 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,16366952,2175,false,1014305,75543794,67,Checkstyle is failing because this needs one more space.,496773299,2016-08-19 20:05:48 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,22060108,2795,false,12473429,105312589,43,Added a comment.,640787230,2017-03-10 01:25:07 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,10781220,1248,false,6773014,46995885,113,I'm inclined to have threads because I'm using blocking client intentionally,351729874,2015-12-08 18:52:47 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,14982452,1856,false,3664876,64471729,42,What is the purpose for this class? Don't we only have one implementation?,451888667,2016-05-24 20:51:56 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,18908780,2427,false,6634728,88573363,435,"Yes that's a good idea. scheduleBackoff() needed to be out of the lock because it used to call `delayedTransport.startBackoff()`, otherwise there would be deadlock. Now as delayed transport is gone, we can make this simpler.",558389459,2016-11-17 23:47:35 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,22478073,2839,false,5551325,107813719,89,Optional: consider moving the assignment of the method along with assignment of the path,647816079,2017-03-24 00:20:11 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,9426544,1048,false,6634728,41415053,66,I just talked with @a11r. We can assume the authority we use to create connections for actual RPCs is always the same as the service name that the naming system gives us. Do you want me to remove serviceName?,325121767,2015-10-07 14:49:26 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,30871298,3670,false,1014305,149251976,20,I'd either want to throw or do nothing. I'd be fine swapping to throwing.,829378408,2017-11-07 01:26:00 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,30233435,3604,false,475246,147564916,9,"Even w/ dependencyConvergence, it may still converge to a wrong version, and/or worse yet, enforcing a newer version of netty, but w/ an incompatible version of tcnative.",818509474,2017-10-28 21:29:16 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,23479137,2916,false,1014305,111764939,15,"I don't follow. I only see values `1000` and INF used. If `1000` is too small, make it larger.",670521190,2017-04-17 16:07:06 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,23479137,2916,false,2489413,111651100,15,"if `enableKeepAlive` is true, the original nano values are too small. `keepAliveTimeout` being 1 nano definitely fails the test.",670521190,2017-04-14 23:51:34 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,7483798,417,false,3402699,30081276,106,"I redid this. I realized that calling `writePing` from an arbitrary app thread could mistakenly break up the two underlying writes (frame header and then payload), interleaving them with other writes.    I changed it to use `ctx.write(Object)` and followe",255372112,2015-05-11 18:59:45 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,18272660,2381,false,1014305,85243845,123,Read can return less than the requested amount.,543173313,2016-10-26 23:51:51 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,6678863,212,false,3664876,26521214,11,Done.,230986153,2015-03-16 18:55:36 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,14676761,1821,false,6174876,63140702,52,final,443192620,2016-05-13 07:05:34 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,11948985,1374,false,5551325,51337648,5,"It nags when building, and I did not know what the correct alternative is.  CIH adds a bunch of methods unrelated to how we are using CH here, so I left it as a todo.",381291083,2016-01-30 01:52:42 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,30725885,3659,false,2667165,148841016,57,now catching all Throwables,826019457,2017-11-03 17:07:25 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,29199329,3518,false,1014305,160555668,18,Why use this?,871701106,2018-01-09 23:39:36 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,30767746,3663,false,2667165,148913666,31,nit: the whitespace here and on 1188 don't match 1156 and 1215. My IDE seems to think 1156 is the correct one.,826858697,2017-11-03 23:41:23 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,20909918,2673,false,5551325,99022649,12,checkNotNull?,609725752,2017-02-01 23:28:30 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,6756105,225,false,6174876,27609272,103,@ejona86 We don't need the check at all. The encoder will take care of this.,236951214,2015-04-01 18:41:36 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,6756105,225,false,1014305,27085241,24,"Remove ""and await"" from comment.",235805516,2015-03-24 22:58:24 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,12307686,1422,false,1014305,53228849,153,Use `ForwardingServerCallListener` or `ForwardingServerCallListener.SimpleForwardingServerCallListener`,389691455,2016-02-17 20:48:24 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,7955256,530,false,1014305,33193516,72,Why is this static?,273701717,2015-06-24 18:42:39 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,15470150,1919,false,5551325,66847115,56,"Sometimes there is an overhead just for having something as part of the system.  Usually doubling the number of custom options should be double the total runtime, but its usually off by a constant.  Having a size of 0 should reveal what that constant is. ",463700580,2016-06-13 18:56:50 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,8054791,553,false,3691158,32794441,4,nice! thanks for moving,272413438,2015-06-18 23:07:46 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,8916743,841,false,1014305,37547258,1,Copyright header.,299326101,2015-08-20 14:01:03 UTC
16827424,https://api.github.com/repos/grpc/grpc-java,The Java gRPC implementation. HTTP/2 based RPC,2018-03-30 18:28:10 UTC,3359,96,72,474,23,19,2018-03-31 05:12:46 UTC,1936,311,Java,java,2030795,96.560418879633914,2016-02-18 03:30:39 UTC,,8320907,678,false,3664876,36791978,47,This is so that it's easily changed locally.  Agreed that it's strange but it's temporary.,279279033,2015-08-11 18:06:45 UTC
42639030,https://api.github.com/repos/wordpress-mobile/WordPress-FluxC-Android,WordPress Network and Persistence layer based on the Flux architecture,2018-03-30 18:22:53 UTC,4726,16,15,737,10,10,2018-03-30 15:43:46 UTC,461,78,Java,,,,,,22602540,383,true,299591,109655659,1,"(Note: I don't care about the order, I think we should just keep them grouped for readability)",650195642,2017-04-04 13:04:12 UTC
42639030,https://api.github.com/repos/wordpress-mobile/WordPress-FluxC-Android,WordPress Network and Persistence layer based on the Flux architecture,2018-03-30 18:22:53 UTC,4726,16,15,737,10,10,2018-03-30 15:43:46 UTC,461,78,Java,,,,,,21700738,330,true,299591,102898338,20,We can drop `request.disableRetries();` which is just a convenience method that calls `setRetryPolicy`,630899289,2017-02-24 08:36:45 UTC
42639030,https://api.github.com/repos/wordpress-mobile/WordPress-FluxC-Android,WordPress Network and Persistence layer based on the Flux architecture,2018-03-30 18:22:53 UTC,4726,16,15,737,10,10,2018-03-30 15:43:46 UTC,461,78,Java,,,,,,36453262,756,true,6647042,177137009,177,"Similarly to [this comment](https://github.com/wordpress-mobile/WordPress-FluxC-Android/pull/756#discussion_r175779590), it doesn't seem like we need the extra overhead of `data` classes here (and for the inner classes as well), since these are only gener",956834027,2018-03-26 15:38:28 UTC
42639030,https://api.github.com/repos/wordpress-mobile/WordPress-FluxC-Android,WordPress Network and Persistence layer based on the Flux architecture,2018-03-30 18:22:53 UTC,4726,16,15,737,10,10,2018-03-30 15:43:46 UTC,461,78,Java,,,,,,30133783,589,true,205127,146329620,23,We need to update this comment as well.,814331450,2017-10-23 16:57:45 UTC
42639030,https://api.github.com/repos/wordpress-mobile/WordPress-FluxC-Android,WordPress Network and Persistence layer based on the Flux architecture,2018-03-30 18:22:53 UTC,4726,16,15,737,10,10,2018-03-30 15:43:46 UTC,461,78,Java,,,,,,22548141,375,true,6647042,106954823,178,Future reader: it turned out that @maxme had `Align when multiline` enabled in AS under `Editor` > `Code Style` > `Java` > `Wrapping and Braces` > `Binary expressions`. Default settings won out.,649492679,2017-03-20 16:54:00 UTC
42639030,https://api.github.com/repos/wordpress-mobile/WordPress-FluxC-Android,WordPress Network and Persistence layer based on the Flux architecture,2018-03-30 18:22:53 UTC,4726,16,15,737,10,10,2018-03-30 15:43:46 UTC,461,78,Java,,,,,,35986072,736,true,299591,173092327,4,Should we add `s` for static field names?,937635182,2018-03-08 08:36:06 UTC
42639030,https://api.github.com/repos/wordpress-mobile/WordPress-FluxC-Android,WordPress Network and Persistence layer based on the Flux architecture,2018-03-30 18:22:53 UTC,4726,16,15,737,10,10,2018-03-30 15:43:46 UTC,461,78,Java,,,,,,21486463,322,true,6647042,101846318,117,Isn't this also going to include local (non-uploaded) media that's in a pending/failed/etc state?,620066152,2017-02-17 21:01:21 UTC
42639030,https://api.github.com/repos/wordpress-mobile/WordPress-FluxC-Android,WordPress Network and Persistence layer based on the Flux architecture,2018-03-30 18:22:53 UTC,4726,16,15,737,10,10,2018-03-30 15:43:46 UTC,461,78,Java,,,,,,31311727,620,true,1719788,151488659,6,I added the new constructor in 307309616c510f23ef800ef67c7b69f383f270c5.  I moved the parsing logic in 5846d60900a0455bd6b9c3cfbe6f7869c0d37eb9.,838927650,2017-11-16 17:49:22 UTC
42639030,https://api.github.com/repos/wordpress-mobile/WordPress-FluxC-Android,WordPress Network and Persistence layer based on the Flux architecture,2018-03-30 18:22:53 UTC,4726,16,15,737,10,10,2018-03-30 15:43:46 UTC,461,78,Java,,,,,,20912800,300,true,6647042,98758563,6,Is this change necessary? Can't we just bump the `wellsql` dependency to `1.1.1` and get the https://github.com/wordpress-mobile/wellsql/pull/6 fix?,609746369,2017-01-31 20:07:43 UTC
42639030,https://api.github.com/repos/wordpress-mobile/WordPress-FluxC-Android,WordPress Network and Persistence layer based on the Flux architecture,2018-03-30 18:22:53 UTC,4726,16,15,737,10,10,2018-03-30 15:43:46 UTC,461,78,Java,,,,,,21069148,306,true,299591,99752249,85,Fixed in  b7d51b0 ,612467488,2017-02-07 06:18:18 UTC
42639030,https://api.github.com/repos/wordpress-mobile/WordPress-FluxC-Android,WordPress Network and Persistence layer based on the Flux architecture,2018-03-30 18:22:53 UTC,4726,16,15,737,10,10,2018-03-30 15:43:46 UTC,461,78,Java,,,,,,27538372,533,true,3407236,137310222,4,"Good to know! thank you for pointing out exactly what the changes were, so we make sure it won't affect existing systems ???? ",775118820,2017-09-06 15:53:19 UTC
42639030,https://api.github.com/repos/wordpress-mobile/WordPress-FluxC-Android,WordPress Network and Persistence layer based on the Flux architecture,2018-03-30 18:22:53 UTC,4726,16,15,737,10,10,2018-03-30 15:43:46 UTC,461,78,Java,,,,,,28043718,542,true,2037006,136213700,48,> especially since it's a public method (which it shouldn't be)?    I think `removeThemes` needs to be exposed so they can be deleted when self-hosted sites are removed in WPAndroid. That's the case I was thinking of at least.,771482869,2017-08-30 23:20:14 UTC
42639030,https://api.github.com/repos/wordpress-mobile/WordPress-FluxC-Android,WordPress Network and Persistence layer based on the Flux architecture,2018-03-30 18:22:53 UTC,4726,16,15,737,10,10,2018-03-30 15:43:46 UTC,461,78,Java,,,,,,30035626,584,true,205127,145811557,51,"We should extract `mThemeStore.getThemeByThemeId(testThemeId, false)` into a variable so we don't have to call it again in the next line.",812465868,2017-10-19 20:17:36 UTC
42639030,https://api.github.com/repos/wordpress-mobile/WordPress-FluxC-Android,WordPress Network and Persistence layer based on the Flux architecture,2018-03-30 18:22:53 UTC,4726,16,15,737,10,10,2018-03-30 15:43:46 UTC,461,78,Java,,,,,,30940982,605,true,408496,158224733,4,"Good point, done with be030a2.",868432764,2017-12-21 08:59:12 UTC
42639030,https://api.github.com/repos/wordpress-mobile/WordPress-FluxC-Android,WordPress Network and Persistence layer based on the Flux architecture,2018-03-30 18:22:53 UTC,4726,16,15,737,10,10,2018-03-30 15:43:46 UTC,461,78,Java,,,,,,36453262,756,true,1512784,177324873,24,I haven't noticed that! thanks ???? ,956834027,2018-03-27 07:00:40 UTC
42639030,https://api.github.com/repos/wordpress-mobile/WordPress-FluxC-Android,WordPress Network and Persistence layer based on the Flux architecture,2018-03-30 18:22:53 UTC,4726,16,15,737,10,10,2018-03-30 15:43:46 UTC,461,78,Java,,,,,,20914106,301,true,299591,98845431,26,Updated in  	336e284,609754616,2017-02-01 08:27:15 UTC
42639030,https://api.github.com/repos/wordpress-mobile/WordPress-FluxC-Android,WordPress Network and Persistence layer based on the Flux architecture,2018-03-30 18:22:53 UTC,4726,16,15,737,10,10,2018-03-30 15:43:46 UTC,461,78,Java,,,,,,28043718,542,true,205127,135794131,49,"Can the `themeId` be empty? I am guessing it can, but I am curious about how it can.",770590822,2017-08-29 13:49:09 UTC
42639030,https://api.github.com/repos/wordpress-mobile/WordPress-FluxC-Android,WordPress Network and Persistence layer based on the Flux architecture,2018-03-30 18:22:53 UTC,4726,16,15,737,10,10,2018-03-30 15:43:46 UTC,461,78,Java,,,,,,16227367,122,true,299591,83203024,70,Same branch `feature/39-media-store-small-fixes` will work,532207175,2016-10-13 12:23:34 UTC
42639030,https://api.github.com/repos/wordpress-mobile/WordPress-FluxC-Android,WordPress Network and Persistence layer based on the Flux architecture,2018-03-30 18:22:53 UTC,4726,16,15,737,10,10,2018-03-30 15:43:46 UTC,461,78,Java,,,,,,17912168,186,true,6647042,84480212,13,This change is causing this test to fail. I think you meant to add `COMMENT_CHANGED_DUPLICATE_COMMENT` to `TEST_EVENTS` and check against `CommentErrorType.DUPLICATE_COMMENT`.,539605234,2016-10-21 13:39:07 UTC
42639030,https://api.github.com/repos/wordpress-mobile/WordPress-FluxC-Android,WordPress Network and Persistence layer based on the Flux architecture,2018-03-30 18:22:53 UTC,4726,16,15,737,10,10,2018-03-30 15:43:46 UTC,461,78,Java,,,,,,28043718,542,true,205127,135791993,20,"I don't know how the fetch wp themes network call works, but if we are getting all the available wp themes and not a subset of them, we should be deleting every theme before inserting the new ones as there could be some themes removed on the remote. If th",770590822,2017-08-29 13:41:18 UTC
42639030,https://api.github.com/repos/wordpress-mobile/WordPress-FluxC-Android,WordPress Network and Persistence layer based on the Flux architecture,2018-03-30 18:22:53 UTC,4726,16,15,737,10,10,2018-03-30 15:43:46 UTC,461,78,Java,,,,,,21486463,322,true,205127,102069231,145,Fixed in db1bb0b2135ea92db336ebd5d2d64b0742aa36b1,620066152,2017-02-20 18:02:02 UTC
42639030,https://api.github.com/repos/wordpress-mobile/WordPress-FluxC-Android,WordPress Network and Persistence layer based on the Flux architecture,2018-03-30 18:22:53 UTC,4726,16,15,737,10,10,2018-03-30 15:43:46 UTC,461,78,Java,,,,,,19068818,236,true,6647042,89407140,33,"Same as above, should be `assertTrue(...)`",562280415,2016-11-23 22:09:23 UTC
42639030,https://api.github.com/repos/wordpress-mobile/WordPress-FluxC-Android,WordPress Network and Persistence layer based on the Flux architecture,2018-03-30 18:22:53 UTC,4726,16,15,737,10,10,2018-03-30 15:43:46 UTC,461,78,Java,,,,,,32680850,655,true,205127,158393338,74,"We need to throw an error here if we don't expect it to happen. Otherwise the test will pass if we ever get `INVALID_INPUT` error when we expect the call to actually succeed. (Not in it's current form, in it's current form it'll just hang because we never",868547197,2017-12-21 22:31:15 UTC
42639030,https://api.github.com/repos/wordpress-mobile/WordPress-FluxC-Android,WordPress Network and Persistence layer based on the Flux architecture,2018-03-30 18:22:53 UTC,4726,16,15,737,10,10,2018-03-30 15:43:46 UTC,461,78,Java,,,,,,32680850,655,true,205127,158095610,28,"Similar to my previous comment, we should have information about which `account` and `username` this even is related to.",868547201,2017-12-20 18:07:54 UTC
42639030,https://api.github.com/repos/wordpress-mobile/WordPress-FluxC-Android,WordPress Network and Persistence layer based on the Flux architecture,2018-03-30 18:22:53 UTC,4726,16,15,737,10,10,2018-03-30 15:43:46 UTC,461,78,Java,,,,,,28105661,546,true,205127,136116619,22,"That's my bad @aforcier, I'll remove that commit.",771884710,2017-08-30 16:13:04 UTC
42639030,https://api.github.com/repos/wordpress-mobile/WordPress-FluxC-Android,WordPress Network and Persistence layer based on the Flux architecture,2018-03-30 18:22:53 UTC,4726,16,15,737,10,10,2018-03-30 15:43:46 UTC,461,78,Java,,,,,,29017818,566,true,299591,143450556,5,"Ok, last time I checked there was a very long discussion about performances of the Android injectors, I'm not sure if it's a big deal or if it's solved.",803619601,2017-10-09 12:14:45 UTC
42639030,https://api.github.com/repos/wordpress-mobile/WordPress-FluxC-Android,WordPress Network and Persistence layer based on the Flux architecture,2018-03-30 18:22:53 UTC,4726,16,15,737,10,10,2018-03-30 15:43:46 UTC,461,78,Java,,,,,,16418505,77,true,299591,76271633,435,"Humm, what about removing the post from the DB here? (or dispatching  `REMOVE_POST`) so the app doesn't have to ""refresh"" the post list or call remove.",499660668,2016-08-25 15:56:45 UTC
42639030,https://api.github.com/repos/wordpress-mobile/WordPress-FluxC-Android,WordPress Network and Persistence layer based on the Flux architecture,2018-03-30 18:22:53 UTC,4726,16,15,737,10,10,2018-03-30 15:43:46 UTC,461,78,Java,,,,,,36240789,749,true,1790890,175254508,72,"I wondered this myself. The response to the upload request does return a list of successfully uploaded media so we should be able to compare that list to the list we asked to upload and figure out what failed, but that's a task for another day.",946222049,2018-03-17 10:40:39 UTC
42639030,https://api.github.com/repos/wordpress-mobile/WordPress-FluxC-Android,WordPress Network and Persistence layer based on the Flux architecture,2018-03-30 18:22:53 UTC,4726,16,15,737,10,10,2018-03-30 15:43:46 UTC,461,78,Java,,,,,,18554814,221,true,6647042,90147167,84,"Agreed - interestingly, `getClass() != other.getClass()` is what the IntelliJ default spits out if you use the generator.",563765508,2016-11-30 00:35:10 UTC
42639030,https://api.github.com/repos/wordpress-mobile/WordPress-FluxC-Android,WordPress Network and Persistence layer based on the Flux architecture,2018-03-30 18:22:53 UTC,4726,16,15,737,10,10,2018-03-30 15:43:46 UTC,461,78,Java,,,,,,35275617,717,true,205127,169705335,143,"We should add a comment about this though, so it's not added by someone else by mistake later. I'll do that before we merge this.",923000859,2018-02-21 16:55:52 UTC
42639030,https://api.github.com/repos/wordpress-mobile/WordPress-FluxC-Android,WordPress Network and Persistence layer based on the Flux architecture,2018-03-30 18:22:53 UTC,4726,16,15,737,10,10,2018-03-30 15:43:46 UTC,461,78,Java,,,,,,20948939,302,true,6647042,99178619,37,Isn't this dangerous? What if a user adds a self-hosted Jetpack site connected to a WP.com account other than the one logged into? Then things like `SiteStore.getWPComSites()` no longer mean what we might think they mean.,611089339,2017-02-02 17:47:35 UTC
42639030,https://api.github.com/repos/wordpress-mobile/WordPress-FluxC-Android,WordPress Network and Persistence layer based on the Flux architecture,2018-03-30 18:22:53 UTC,4726,16,15,737,10,10,2018-03-30 15:43:46 UTC,461,78,Java,,,,,,21554258,325,true,6647042,102237509,23,Do you know why we're setting the progress to `0` here while the corresponding cases in `MediaRestClient` send progress `1`?,628106427,2017-02-21 15:41:38 UTC
42639030,https://api.github.com/repos/wordpress-mobile/WordPress-FluxC-Android,WordPress Network and Persistence layer based on the Flux architecture,2018-03-30 18:22:53 UTC,4726,16,15,737,10,10,2018-03-30 15:43:46 UTC,461,78,Java,,,,,,28043718,542,true,205127,135791478,181,I haven't checked the `ThemeSqlUtils` yet but shouldn't this method be named as `insertOrUpdate`?,770590822,2017-08-29 13:39:28 UTC
42639030,https://api.github.com/repos/wordpress-mobile/WordPress-FluxC-Android,WordPress Network and Persistence layer based on the Flux architecture,2018-03-30 18:22:53 UTC,4726,16,15,737,10,10,2018-03-30 15:43:46 UTC,461,78,Java,,,,,,36240789,749,true,6647042,175460559,33,"`ReleaseStack_WPComBase` 's `mNextEvent` is private, and the `mNextEvent = TestEvents.NONE` in there doesn't actually affect `mNextEvent` in its subclasses - they're two different objects. So, it's still necessary to reset the `mNextEvent` here if we want",942643651,2018-03-19 14:46:40 UTC
42639030,https://api.github.com/repos/wordpress-mobile/WordPress-FluxC-Android,WordPress Network and Persistence layer based on the Flux architecture,2018-03-30 18:22:53 UTC,4726,16,15,737,10,10,2018-03-30 15:43:46 UTC,461,78,Java,,,,,,27538372,533,true,6647042,137299994,72,"Great suggestion! I made some `.json` file resources instead, I think it's the cleanest way to do this: adbcb2d.",775118820,2017-09-06 15:19:59 UTC
42639030,https://api.github.com/repos/wordpress-mobile/WordPress-FluxC-Android,WordPress Network and Persistence layer based on the Flux architecture,2018-03-30 18:22:53 UTC,4726,16,15,737,10,10,2018-03-30 15:43:46 UTC,461,78,Java,,,,,,30967492,606,true,205127,149830329,15,"I even thought that this would stand out and I should mention it in the PR description, but completely forgot about it.",831381707,2017-11-08 23:40:36 UTC
42639030,https://api.github.com/repos/wordpress-mobile/WordPress-FluxC-Android,WordPress Network and Persistence layer based on the Flux architecture,2018-03-30 18:22:53 UTC,4726,16,15,737,10,10,2018-03-30 15:43:46 UTC,461,78,Java,,,,,,16093741,109,true,6647042,74266760,6,"If we don't plan on supporting any sub-endpoints anytime soon (`.../post-formats/new/`?), we can simplify this to `new WPComEndpoint(getEndpoint() + ""post-formats/"")` and drop `PostFormatsEndpoint` (see, e.g., the `/users/new/` endpoint below).",489087626,2016-08-10 15:24:38 UTC
42639030,https://api.github.com/repos/wordpress-mobile/WordPress-FluxC-Android,WordPress Network and Persistence layer based on the Flux architecture,2018-03-30 18:22:53 UTC,4726,16,15,737,10,10,2018-03-30 15:43:46 UTC,461,78,Java,,,,,,16496106,137,true,2037006,75999491,15,<3 Thanks,499054945,2016-08-24 06:09:58 UTC
42639030,https://api.github.com/repos/wordpress-mobile/WordPress-FluxC-Android,WordPress Network and Persistence layer based on the Flux architecture,2018-03-30 18:22:53 UTC,4726,16,15,737,10,10,2018-03-30 15:43:46 UTC,461,78,Java,,,,,,29017818,566,true,299591,143449520,5,We should switch to Android injectors at some point,803619601,2017-10-09 12:09:30 UTC
42639030,https://api.github.com/repos/wordpress-mobile/WordPress-FluxC-Android,WordPress Network and Persistence layer based on the Flux architecture,2018-03-30 18:22:53 UTC,4726,16,15,737,10,10,2018-03-30 15:43:46 UTC,461,78,Java,,,,,,25467610,469,true,6647042,123369743,22,We can probably name this something like `removeWPComRestSitesAbsentFromList` for a bit of extra clarity - what do you think?,714121967,2017-06-21 21:23:24 UTC
42639030,https://api.github.com/repos/wordpress-mobile/WordPress-FluxC-Android,WordPress Network and Persistence layer based on the Flux architecture,2018-03-30 18:22:53 UTC,4726,16,15,737,10,10,2018-03-30 15:43:46 UTC,461,78,Java,,,,,,28043718,542,true,205127,136010020,49,Another issue here is that `getSiteId` will return the remote id and not the local one. We should be using the local one here.,771482869,2017-08-30 08:56:02 UTC
42639030,https://api.github.com/repos/wordpress-mobile/WordPress-FluxC-Android,WordPress Network and Persistence layer based on the Flux architecture,2018-03-30 18:22:53 UTC,4726,16,15,737,10,10,2018-03-30 15:43:46 UTC,461,78,Java,,,,,,16672931,153,true,6647042,77193679,41,Done in ce5c7d3.,502955961,2016-09-01 15:14:00 UTC
42639030,https://api.github.com/repos/wordpress-mobile/WordPress-FluxC-Android,WordPress Network and Persistence layer based on the Flux architecture,2018-03-30 18:22:53 UTC,4726,16,15,737,10,10,2018-03-30 15:43:46 UTC,461,78,Java,,,,,,16418505,77,true,299591,76272838,435,"Note: If we decide to not do that, then we should update the example app and dispatch REMOVE_POST in OnPostChanged, so if we tap the ""Delete Post"" button several time in the example it won't do weird things.",499660668,2016-08-25 16:02:42 UTC
42639030,https://api.github.com/repos/wordpress-mobile/WordPress-FluxC-Android,WordPress Network and Persistence layer based on the Flux architecture,2018-03-30 18:22:53 UTC,4726,16,15,737,10,10,2018-03-30 15:43:46 UTC,461,78,Java,,,,,,25467610,469,true,6647042,123368527,17,We should still handle the [duplicate sites case](https://github.com/wordpress-mobile/WordPress-FluxC-Android/blob/619b1804f03d1faa2dd18be6131c1c252c052043/fluxc/src/main/java/org/wordpress/android/fluxc/store/SiteStore.java#L842-L844) here.,714121967,2017-06-21 21:18:05 UTC
42639030,https://api.github.com/repos/wordpress-mobile/WordPress-FluxC-Android,WordPress Network and Persistence layer based on the Flux architecture,2018-03-30 18:22:53 UTC,4726,16,15,737,10,10,2018-03-30 15:43:46 UTC,461,78,Java,,,,,,35986072,736,true,299591,173092478,12,"Note I changed that to run `Restyle code` without changing every javadoc, but we could re-enable it.",937635182,2018-03-08 08:36:53 UTC
42639030,https://api.github.com/repos/wordpress-mobile/WordPress-FluxC-Android,WordPress Network and Persistence layer based on the Flux architecture,2018-03-30 18:22:53 UTC,4726,16,15,737,10,10,2018-03-30 15:43:46 UTC,461,78,Java,,,,,,18054027,195,true,6647042,84303833,5,"Fixed in c165101, was meant to be Bordeaux!",538165589,2016-10-20 15:05:46 UTC
42639030,https://api.github.com/repos/wordpress-mobile/WordPress-FluxC-Android,WordPress Network and Persistence layer based on the Flux architecture,2018-03-30 18:22:53 UTC,4726,16,15,737,10,10,2018-03-30 15:43:46 UTC,461,78,Java,,,,,,23795778,424,true,6647042,113179355,17,> we should call `notifyMediaUploaded` with an error and we should also call `removeCallFromCurrentUploadsMap`    Done in 83e0939.    > (I wonder if we should move this to `notifyMediaUploaded` to make sure we don't forget it)    My thoughts exactly - not,677789525,2017-04-25 12:20:11 UTC
42639030,https://api.github.com/repos/wordpress-mobile/WordPress-FluxC-Android,WordPress Network and Persistence layer based on the Flux architecture,2018-03-30 18:22:53 UTC,4726,16,15,737,10,10,2018-03-30 15:43:46 UTC,461,78,Java,,,,,,32929253,666,true,1790890,159007093,15,"Before I started the code review I commented that updating an existing tag isn't working, and I believe this is why. If I edit a tag name, then the updated slug will be passed here. Instead, it needs to pass the pre-existing slug.",875357738,2017-12-28 22:36:01 UTC
42639030,https://api.github.com/repos/wordpress-mobile/WordPress-FluxC-Android,WordPress Network and Persistence layer based on the Flux architecture,2018-03-30 18:22:53 UTC,4726,16,15,737,10,10,2018-03-30 15:43:46 UTC,461,78,Java,,,,,,20314703,274,true,205127,101021610,408,"Same issue mentioned in [handleMediaFetched](https://github.com/wordpress-mobile/WordPress-FluxC-Android/pull/274/files#r101021343) could happen here. This is slightly different as there is no later `null` check, but we should probably check for it before",618086895,2017-02-14 12:16:06 UTC
42639030,https://api.github.com/repos/wordpress-mobile/WordPress-FluxC-Android,WordPress Network and Persistence layer based on the Flux architecture,2018-03-30 18:22:53 UTC,4726,16,15,737,10,10,2018-03-30 15:43:46 UTC,461,78,Java,,,,,,32197858,641,true,6647042,155698699,5,"This is pretty minor, but I think we may as well check that the string is not empty here, as an extra verification that we're parsing it properly/it's not returned empty from the server.",858634558,2017-12-08 03:43:43 UTC
42639030,https://api.github.com/repos/wordpress-mobile/WordPress-FluxC-Android,WordPress Network and Persistence layer based on the Flux architecture,2018-03-30 18:22:53 UTC,4726,16,15,737,10,10,2018-03-30 15:43:46 UTC,461,78,Java,,,,,,24986846,457,true,3407236,121222425,25,good call! ???? ,706136543,2017-06-09 21:03:41 UTC
42639030,https://api.github.com/repos/wordpress-mobile/WordPress-FluxC-Android,WordPress Network and Persistence layer based on the Flux architecture,2018-03-30 18:22:53 UTC,4726,16,15,737,10,10,2018-03-30 15:43:46 UTC,461,78,Java,,,,,,22883766,400,true,299591,109009749,12,"Yes, please, it's much easier to use dagger for this.",657931485,2017-03-30 19:00:08 UTC
42639030,https://api.github.com/repos/wordpress-mobile/WordPress-FluxC-Android,WordPress Network and Persistence layer based on the Flux architecture,2018-03-30 18:22:53 UTC,4726,16,15,737,10,10,2018-03-30 15:43:46 UTC,461,78,Java,,,,,,23648886,418,true,2037006,112699400,12,"It was a questionable decision on my end. I decided to do it since none of the `PostStore` action handlers (`fetchPosts`, `deletePost`, etc...) did any error checking, they are simply pass-throughs to the appropriate client. I'm 100% on board with removin",674727075,2017-04-21 14:25:32 UTC
42639030,https://api.github.com/repos/wordpress-mobile/WordPress-FluxC-Android,WordPress Network and Persistence layer based on the Flux architecture,2018-03-30 18:22:53 UTC,4726,16,15,737,10,10,2018-03-30 15:43:46 UTC,461,78,Java,,,,,,22080730,345,true,299591,105388243,4,???? ,639550788,2017-03-10 12:36:07 UTC
42639030,https://api.github.com/repos/wordpress-mobile/WordPress-FluxC-Android,WordPress Network and Persistence layer based on the Flux architecture,2018-03-30 18:22:53 UTC,4726,16,15,737,10,10,2018-03-30 15:43:46 UTC,461,78,Java,,,,,,24940288,454,true,6647042,120926270,29,"I can see that we get an `unknown : Unknown error communicating with the Jetpack site` error if we exceed both `upload_max_filesize` and `post_max_size`, and I guess that's why you're changing the error for `unknown` too. But I'm not sure that we should m",702603610,2017-06-08 15:49:15 UTC
42639030,https://api.github.com/repos/wordpress-mobile/WordPress-FluxC-Android,WordPress Network and Persistence layer based on the Flux architecture,2018-03-30 18:22:53 UTC,4726,16,15,737,10,10,2018-03-30 15:43:46 UTC,461,78,Java,,,,,,17912168,186,true,299591,84468602,42,"Good catch, I updated `genericToCommentError` for REST, and added a comment for XMLRPC.",538974589,2016-10-21 12:19:22 UTC
14932800,https://api.github.com/repos/Netflix/iep,Insight Engineering Platform Components,2018-03-30 14:56:32 UTC,352,9,8,45,3,3,2018-03-30 15:03:23 UTC,124,10,Java,java,275328,94.1108912109435,2016-02-29 17:52:12 UTC,,19059465,285,true,15698,89119408,29,"Specify a locale for the toLowerCase conversion, otherwise it is system dependent. `Locale.US` should work fine for this purpose. ",561174279,2016-11-22 13:57:19 UTC
14932800,https://api.github.com/repos/Netflix/iep,Insight Engineering Platform Components,2018-03-30 14:56:32 UTC,352,9,8,45,3,3,2018-03-30 15:03:23 UTC,124,10,Java,java,275328,94.1108912109435,2016-02-29 17:52:12 UTC,,21075773,293,true,15698,99959057,33,Can you follow the typical java/scala comment format so these will show up in scaladoc or similar tools?    ```  /**    * ...    */  ```,612561165,2017-02-07 23:38:37 UTC
14932800,https://api.github.com/repos/Netflix/iep,Insight Engineering Platform Components,2018-03-30 14:56:32 UTC,352,9,8,45,3,3,2018-03-30 15:03:23 UTC,124,10,Java,java,275328,94.1108912109435,2016-02-29 17:52:12 UTC,,21075773,293,true,15698,99959949,47,"The url should be configurable. Perhaps a constructor param?    Why not use iep-rxhttp? It is already being used by many of our projects, has the standard metrics/logging we expect, and since it would generate an observable could be used more cleanly with",612561165,2017-02-07 23:44:04 UTC
14932800,https://api.github.com/repos/Netflix/iep,Insight Engineering Platform Components,2018-03-30 14:56:32 UTC,352,9,8,45,3,3,2018-03-30 15:03:23 UTC,124,10,Java,java,275328,94.1108912109435,2016-02-29 17:52:12 UTC,,33960923,347,false,3918284,163408839,13,"That's fair. The (complete) removal of archaius1 is on the TODO list, but it will involve some significant restructuring of the project so is not as trivial.",896757865,2018-01-23 23:22:24 UTC
14932800,https://api.github.com/repos/Netflix/iep,Insight Engineering Platform Components,2018-03-30 14:56:32 UTC,352,9,8,45,3,3,2018-03-30 15:03:23 UTC,124,10,Java,java,275328,94.1108912109435,2016-02-29 17:52:12 UTC,,33960923,347,false,3918284,163405200,13,"Out of curiosity, have you guys looked at eureka-client-archaius2? It is entirely archaius2 based and does not instantiate any archaius1 classes at all.",896757865,2018-01-23 23:03:12 UTC
14932800,https://api.github.com/repos/Netflix/iep,Insight Engineering Platform Components,2018-03-30 14:56:32 UTC,352,9,8,45,3,3,2018-03-30 15:03:23 UTC,124,10,Java,java,275328,94.1108912109435,2016-02-29 17:52:12 UTC,,21075773,293,true,48090,99985922,121,Will fix in a future commit.  ,612561165,2017-02-08 03:33:00 UTC
14932800,https://api.github.com/repos/Netflix/iep,Insight Engineering Platform Components,2018-03-30 14:56:32 UTC,352,9,8,45,3,3,2018-03-30 15:03:23 UTC,124,10,Java,java,275328,94.1108912109435,2016-02-29 17:52:12 UTC,,19059465,285,true,15698,89119519,27,s/if(/if (/    Should we allow null values to be passed in? Maybe this should be a NullPointerException.,561174279,2016-11-22 13:57:59 UTC
14932800,https://api.github.com/repos/Netflix/iep,Insight Engineering Platform Components,2018-03-30 14:56:32 UTC,352,9,8,45,3,3,2018-03-30 15:03:23 UTC,124,10,Java,java,275328,94.1108912109435,2016-02-29 17:52:12 UTC,,6498020,21,false,108154,25667389,6,@brharrington That makes sense.,225160396,2015-03-03 06:24:20 UTC
14932800,https://api.github.com/repos/Netflix/iep,Insight Engineering Platform Components,2018-03-30 14:56:32 UTC,352,9,8,45,3,3,2018-03-30 15:03:23 UTC,124,10,Java,java,275328,94.1108912109435,2016-02-29 17:52:12 UTC,,21075773,293,true,15698,99960347,53,Personally I prefer to avoid alignment with the opening paren. I find it harder to read and it causes unnecessary diffs when refactoring that changes where the start is. If it won't fit on the line I prefer:    ```scala  case class EddaAutoScalingGroup(  ,612561165,2017-02-07 23:46:35 UTC
14932800,https://api.github.com/repos/Netflix/iep,Insight Engineering Platform Components,2018-03-30 14:56:32 UTC,352,9,8,45,3,3,2018-03-30 15:03:23 UTC,124,10,Java,java,275328,94.1108912109435,2016-02-29 17:52:12 UTC,,33960923,347,false,15698,163386935,5,This isn't always done. The reason we do not do it automatically as a transitive dependency is that the app may be configuring archaius1 in some other way.,896709736,2018-01-23 21:46:12 UTC
14932800,https://api.github.com/repos/Netflix/iep,Insight Engineering Platform Components,2018-03-30 14:56:32 UTC,352,9,8,45,3,3,2018-03-30 15:03:23 UTC,124,10,Java,java,275328,94.1108912109435,2016-02-29 17:52:12 UTC,,14859543,256,false,364933,63940911,4,There is no need to remove the final from this usage here. You want to remove final from the name() method so it can be overriden by WebServer.    https://github.com/copperlight/iep/blob/a9ab01dec2897d23b86694ad0ea6166346d96104/iep-service/src/main/java/c,448986774,2016-05-19 19:35:49 UTC
14932800,https://api.github.com/repos/Netflix/iep,Insight Engineering Platform Components,2018-03-30 14:56:32 UTC,352,9,8,45,3,3,2018-03-30 15:03:23 UTC,124,10,Java,java,275328,94.1108912109435,2016-02-29 17:52:12 UTC,,19560174,288,false,15698,91770860,1,Rename the file to IepModule to match the new class name.,573184202,2016-12-09 18:43:13 UTC
14932800,https://api.github.com/repos/Netflix/iep,Insight Engineering Platform Components,2018-03-30 14:56:32 UTC,352,9,8,45,3,3,2018-03-30 15:03:23 UTC,124,10,Java,java,275328,94.1108912109435,2016-02-29 17:52:12 UTC,,6498020,21,false,15698,25649668,6,I think it would be better to move it to the beginning of the function and do something like:    ```java  if (servers.isEmpty()) {    return Collections.emptyList();  }  ```,225160396,2015-03-02 22:29:57 UTC
14932800,https://api.github.com/repos/Netflix/iep,Insight Engineering Platform Components,2018-03-30 14:56:32 UTC,352,9,8,45,3,3,2018-03-30 15:03:23 UTC,124,10,Java,java,275328,94.1108912109435,2016-02-29 17:52:12 UTC,,19059465,285,true,15698,89119140,15,"This would do the conversion work on each access, it would be better to do it early when the data is cached.",561174279,2016-11-22 13:55:59 UTC
14932800,https://api.github.com/repos/Netflix/iep,Insight Engineering Platform Components,2018-03-30 14:56:32 UTC,352,9,8,45,3,3,2018-03-30 15:03:23 UTC,124,10,Java,java,275328,94.1108912109435,2016-02-29 17:52:12 UTC,,21075773,293,true,48090,99985701,47,"This is still something of a WIP.  I plan on converting it over to use more standard idioms before considering it done, but this is good enough for tomorrow's work.",612561165,2017-02-08 03:30:35 UTC
14932800,https://api.github.com/repos/Netflix/iep,Insight Engineering Platform Components,2018-03-30 14:56:32 UTC,352,9,8,45,3,3,2018-03-30 15:03:23 UTC,124,10,Java,java,275328,94.1108912109435,2016-02-29 17:52:12 UTC,,33960923,347,false,15698,163407654,13,"I looked at it a little bit, but never got around to trying it. One minor disappointment is that it would still pull archaius1 into the classpath even though it shouldn't get used. I would like to shed archaius1 entirely so that it is no longer discoverab",896757865,2018-01-23 23:15:42 UTC
14932800,https://api.github.com/repos/Netflix/iep,Insight Engineering Platform Components,2018-03-30 14:56:32 UTC,352,9,8,45,3,3,2018-03-30 15:03:23 UTC,124,10,Java,java,275328,94.1108912109435,2016-02-29 17:52:12 UTC,,21075773,293,true,15698,99960718,121,It would seem more idiomatic to me to use something like [Observable.interval](http://reactivex.io/documentation/operators/interval.html) to trigger the refresh.,612561165,2017-02-07 23:49:22 UTC
17422,https://api.github.com/repos/gamerson/liferay-ide,"",2018-03-30 14:55:51 UTC,1989,16,14,376,12,8,2018-03-31 14:34:12 UTC,1880,301,Java,java,1700883,98.976071281639165,2016-10-11 20:35:23 UTC,17423,4540841,645,false,16826,17162173,14,Remove contributors section,155362872,2014-09-05 06:48:11 UTC
17422,https://api.github.com/repos/gamerson/liferay-ide,"",2018-03-30 14:55:51 UTC,1989,16,14,376,12,8,2018-03-31 14:34:12 UTC,1880,301,Java,java,1700883,98.976071281639165,2016-10-11 20:35:23 UTC,17423,27937810,2429,false,8066534,135969677,9,"sorry , I don't get you , to which version?",770641925,2017-08-30 04:54:33 UTC
17422,https://api.github.com/repos/gamerson/liferay-ide,"",2018-03-30 14:55:51 UTC,1989,16,14,376,12,8,2018-03-31 14:34:12 UTC,1880,301,Java,java,1700883,98.976071281639165,2016-10-11 20:35:23 UTC,17423,9888122,1199,false,16826,42224487,74,Use the static method MessageDialog.openConfirm(),331290724,2015-10-16 07:33:02 UTC
17422,https://api.github.com/repos/gamerson/liferay-ide,"",2018-03-30 14:55:51 UTC,1989,16,14,376,12,8,2018-03-31 14:34:12 UTC,1880,301,Java,java,1700883,98.976071281639165,2016-10-11 20:35:23 UTC,17423,3241855,487,false,16826,10556498,31,Lets also add a new test called testIncludeSampleCode() that will just create a project leaving the sample code as true and then make sure that the getElements().getLength() is set to 1,95883691,2014-03-13 07:56:44 UTC
3281281,https://api.github.com/repos/wildfly/wildfly,WildFly Application Server,2018-03-31 16:17:41 UTC,6707,150,146,886,58,57,2018-03-31 18:17:42 UTC,2439,405,Java,java,31421107,99.238123151687958,2016-03-06 10:26:27 UTC,,3844992,6360,false,10235,13803755,42,"That won't work.  The super.populateModel(...) logic isn't handled by AbstractAddStepHandler, but in StoreAddHandler.",121035908,2014-06-16 11:08:57 UTC
3281281,https://api.github.com/repos/wildfly/wildfly,WildFly Application Server,2018-03-31 16:17:41 UTC,6707,150,146,886,58,57,2018-03-31 18:17:42 UTC,2439,405,Java,java,31421107,99.238123151687958,2016-03-06 10:26:27 UTC,,8529091,7790,false,10267,35099194,8,this are default values ,282433300,2015-07-21 11:09:40 UTC
3281281,https://api.github.com/repos/wildfly/wildfly,WildFly Application Server,2018-03-31 16:17:41 UTC,6707,150,146,886,58,57,2018-03-31 18:17:42 UTC,2439,405,Java,java,31421107,99.238123151687958,2016-03-06 10:26:27 UTC,,36621445,11033,false,35174,175926685,24,"Logging should be done at debug level or lower, normal test execution should produce no log output.",950671409,2018-03-20 21:21:26 UTC
3281281,https://api.github.com/repos/wildfly/wildfly,WildFly Application Server,2018-03-31 16:17:41 UTC,6707,150,146,886,58,57,2018-03-31 18:17:42 UTC,2439,405,Java,java,31421107,99.238123151687958,2016-03-06 10:26:27 UTC,,3681864,6281,false,35174,12753097,12,There are not really any cases where this can be used without causing potential backwards compatibility problems.,111022514,2014-05-16 16:32:02 UTC
3281281,https://api.github.com/repos/wildfly/wildfly,WildFly Application Server,2018-03-31 16:17:41 UTC,6707,150,146,886,58,57,2018-03-31 18:17:42 UTC,2439,405,Java,java,31421107,99.238123151687958,2016-03-06 10:26:27 UTC,,16084006,8984,false,38993,74359941,4,"This change helped but we also need the same line added to org.jboss.as.test.integration.hibernate.secondlevelcache.SFSB, after line 82.  This helped with my local testing.",489516574,2016-08-11 01:33:29 UTC
3281281,https://api.github.com/repos/wildfly/wildfly,WildFly Application Server,2018-03-31 16:17:41 UTC,6707,150,146,886,58,57,2018-03-31 18:17:42 UTC,2439,405,Java,java,31421107,99.238123151687958,2016-03-06 10:26:27 UTC,,8497354,7783,false,10235,35696911,31,Will fix.,280489437,2015-07-28 18:33:02 UTC
3281281,https://api.github.com/repos/wildfly/wildfly,WildFly Application Server,2018-03-31 16:17:41 UTC,6707,150,146,886,58,57,2018-03-31 18:17:42 UTC,2439,405,Java,java,31421107,99.238123151687958,2016-03-06 10:26:27 UTC,,1840333,4841,false,82816,5472338,4,"Not directly related to this PR, but I wonder why the spec introduced a JMS specific IllegalStateException.  ",52032392,2013-07-30 07:58:23 UTC
3281281,https://api.github.com/repos/wildfly/wildfly,WildFly Application Server,2018-03-31 16:17:41 UTC,6707,150,146,886,58,57,2018-03-31 18:17:42 UTC,2439,405,Java,java,31421107,99.238123151687958,2016-03-06 10:26:27 UTC,,1395907,4438,false,82816,3988351,34,WildFly instead of AS 8  ,38223386,2013-04-27 01:39:00 UTC
3281281,https://api.github.com/repos/wildfly/wildfly,WildFly Application Server,2018-03-31 16:17:41 UTC,6707,150,146,886,58,57,2018-03-31 18:17:42 UTC,2439,405,Java,java,31421107,99.238123151687958,2016-03-06 10:26:27 UTC,,17314265,9217,false,10267,84307228,64,log.trace if anything,518377170,2016-10-20 15:20:25 UTC
3281281,https://api.github.com/repos/wildfly/wildfly,WildFly Application Server,2018-03-31 16:17:41 UTC,6707,150,146,886,58,57,2018-03-31 18:17:42 UTC,2439,405,Java,java,31421107,99.238123151687958,2016-03-06 10:26:27 UTC,,17314265,9217,false,136637,86975470,62,"True, I can's see any reason why it should not be thrown. Can't remember my reason for this.",550943587,2016-11-08 12:05:54 UTC
1958,https://api.github.com/repos/infinispan/infinispan,Infinispan is an open source data grid platform and highly scalable NoSQL cloud data store.,2018-03-29 16:11:44 UTC,4943,84,55,434,28,19,2018-03-30 17:46:19 UTC,1988,250,Java,java,23011311,97.542435218197127,2016-10-11 14:23:40 UTC,,24751418,5143,false,179340,121914821,5,this change isn't needed.,713769129,2017-06-14 10:52:18 UTC
1958,https://api.github.com/repos/infinispan/infinispan,Infinispan is an open source data grid platform and highly scalable NoSQL cloud data store.,2018-03-29 16:11:44 UTC,4943,84,55,434,28,19,2018-03-30 17:46:19 UTC,1988,250,Java,java,23011311,97.542435218197127,2016-10-11 14:23:40 UTC,,18286764,4635,false,488804,100021538,117,"I should have pointed this out sooner, but this is missing cache stores. Since `Cache` doesn't have proper async API, you could create `GetCacheEntryCommand` and invoke it using async interceptor stack yourselves.",611930412,2017-02-08 09:24:16 UTC
1958,https://api.github.com/repos/infinispan/infinispan,Infinispan is an open source data grid platform and highly scalable NoSQL cloud data store.,2018-03-29 16:11:44 UTC,4943,84,55,434,28,19,2018-03-30 17:46:19 UTC,1988,250,Java,java,23011311,97.542435218197127,2016-10-11 14:23:40 UTC,,6915373,3354,false,10239,27909675,125,Why shouldn't this always be uncommented?,241667362,2015-04-07 17:07:21 UTC
1958,https://api.github.com/repos/infinispan/infinispan,Infinispan is an open source data grid platform and highly scalable NoSQL cloud data store.,2018-03-29 16:11:44 UTC,4943,84,55,434,28,19,2018-03-30 17:46:19 UTC,1988,250,Java,java,23011311,97.542435218197127,2016-10-11 14:23:40 UTC,,30060018,5525,false,10236,149781321,24,"Just for completeness, we should add BINARY.",813314211,2017-11-08 20:01:11 UTC
1958,https://api.github.com/repos/infinispan/infinispan,Infinispan is an open source data grid platform and highly scalable NoSQL cloud data store.,2018-03-29 16:11:44 UTC,4943,84,55,434,28,19,2018-03-30 17:46:19 UTC,1988,250,Java,java,23011311,97.542435218197127,2016-10-11 14:23:40 UTC,,30892244,5570,false,179340,152814440,97,"can you explain what is happening here? the counter-name, storage and initial-value can't be changed and they are set when you define a counter. ",845263637,2017-11-23 14:32:32 UTC
1958,https://api.github.com/repos/infinispan/infinispan,Infinispan is an open source data grid platform and highly scalable NoSQL cloud data store.,2018-03-29 16:11:44 UTC,4943,84,55,434,28,19,2018-03-30 17:46:19 UTC,1988,250,Java,java,23011311,97.542435218197127,2016-10-11 14:23:40 UTC,,30892244,5570,false,10238,152778010,53,"ok, thanks @pruivo ",843292479,2017-11-23 11:30:41 UTC
1958,https://api.github.com/repos/infinispan/infinispan,Infinispan is an open source data grid platform and highly scalable NoSQL cloud data store.,2018-03-29 16:11:44 UTC,4943,84,55,434,28,19,2018-03-30 17:46:19 UTC,1988,250,Java,java,23011311,97.542435218197127,2016-10-11 14:23:40 UTC,,25757330,5227,false,488804,124530487,110,@karesti I think that this means that this has to wait until ISPN-7990 is done.,720667945,2017-06-28 12:47:26 UTC
1958,https://api.github.com/repos/infinispan/infinispan,Infinispan is an open source data grid platform and highly scalable NoSQL cloud data store.,2018-03-29 16:11:44 UTC,4943,84,55,434,28,19,2018-03-30 17:46:19 UTC,1988,250,Java,java,23011311,97.542435218197127,2016-10-11 14:23:40 UTC,,20986027,4827,false,10239,113763414,124,"Sorry, I guess I got confused by my old codes then: looking at the table now, I have no idea why I didn't make all the codes at least 4 digits, or why I didn't write which node owns the key in the initial topology and in the final one :)",612566456,2017-04-27 18:02:45 UTC
1958,https://api.github.com/repos/infinispan/infinispan,Infinispan is an open source data grid platform and highly scalable NoSQL cloud data store.,2018-03-29 16:11:44 UTC,4943,84,55,434,28,19,2018-03-30 17:46:19 UTC,1988,250,Java,java,23011311,97.542435218197127,2016-10-11 14:23:40 UTC,,30604818,5556,false,179340,149403252,21,all changes in this class can be reverted!,829163102,2017-11-07 15:27:37 UTC
1958,https://api.github.com/repos/infinispan/infinispan,Infinispan is an open source data grid platform and highly scalable NoSQL cloud data store.,2018-03-29 16:11:44 UTC,4943,84,55,434,28,19,2018-03-30 17:46:19 UTC,1988,250,Java,java,23011311,97.542435218197127,2016-10-11 14:23:40 UTC,,16876045,4553,false,10239,79589903,154,"@slaskawi @gustavonalle In theory you could have a ""deadlock"" if a remote node throws an `OutdatedTopologyException` during the remove, but the local node can't install the newer topology because you're blocking it. These removals are triggered from a `@T",510250992,2016-09-20 11:35:35 UTC
1958,https://api.github.com/repos/infinispan/infinispan,Infinispan is an open source data grid platform and highly scalable NoSQL cloud data store.,2018-03-29 16:11:44 UTC,4943,84,55,434,28,19,2018-03-30 17:46:19 UTC,1988,250,Java,java,23011311,97.542435218197127,2016-10-11 14:23:40 UTC,,40976,967,false,10250,500542,4,"the approach we use in order to keep a class's creators is by using the @author javadoc tag. Generally if your modifications added to a class impacts its functionality, as they obviously are in many of the classes this patch touched, then you should add y",4089474,2012-02-29 08:27:20 UTC
1958,https://api.github.com/repos/infinispan/infinispan,Infinispan is an open source data grid platform and highly scalable NoSQL cloud data store.,2018-03-29 16:11:44 UTC,4943,84,55,434,28,19,2018-03-30 17:46:19 UTC,1988,250,Java,java,23011311,97.542435218197127,2016-10-11 14:23:40 UTC,,14753275,4350,false,488804,91070554,121,Why is this an element (I would make single-attribute element just an attribute).,572853256,2016-12-06 12:47:43 UTC
1958,https://api.github.com/repos/infinispan/infinispan,Infinispan is an open source data grid platform and highly scalable NoSQL cloud data store.,2018-03-29 16:11:44 UTC,4943,84,55,434,28,19,2018-03-30 17:46:19 UTC,1988,250,Java,java,23011311,97.542435218197127,2016-10-11 14:23:40 UTC,,7462131,3449,false,167550,30210363,78,I don't see why not...,254912923,2015-05-13 06:19:01 UTC
1958,https://api.github.com/repos/infinispan/infinispan,Infinispan is an open source data grid platform and highly scalable NoSQL cloud data store.,2018-03-29 16:11:44 UTC,4943,84,55,434,28,19,2018-03-30 17:46:19 UTC,1988,250,Java,java,23011311,97.542435218197127,2016-10-11 14:23:40 UTC,,8335353,3577,false,10239,38417169,8,"I still think the entry equivalence isn't necessary... the `Collection.retainAll()` javadoc says ""Retains only the elements in this collection that are contained in the specified collection"", so it's defined based on the collection parameter's `contains()",279446839,2015-09-01 11:21:35 UTC
1958,https://api.github.com/repos/infinispan/infinispan,Infinispan is an open source data grid platform and highly scalable NoSQL cloud data store.,2018-03-29 16:11:44 UTC,4943,84,55,434,28,19,2018-03-30 17:46:19 UTC,1988,250,Java,java,23011311,97.542435218197127,2016-10-11 14:23:40 UTC,,8335353,3577,false,10239,34988077,267,`entrySet()` shouldn't support `add()` and `addAll()`,279446839,2015-07-20 10:09:56 UTC
1958,https://api.github.com/repos/infinispan/infinispan,Infinispan is an open source data grid platform and highly scalable NoSQL cloud data store.,2018-03-29 16:11:44 UTC,4943,84,55,434,28,19,2018-03-30 17:46:19 UTC,1988,250,Java,java,23011311,97.542435218197127,2016-10-11 14:23:40 UTC,,30604818,5556,false,10234,149375870,22,"AttributeDefinitions are final static, so this works, although it's probably better to implement equals",829163102,2017-11-07 14:06:59 UTC
1958,https://api.github.com/repos/infinispan/infinispan,Infinispan is an open source data grid platform and highly scalable NoSQL cloud data store.,2018-03-29 16:11:44 UTC,4943,84,55,434,28,19,2018-03-30 17:46:19 UTC,1988,250,Java,java,23011311,97.542435218197127,2016-10-11 14:23:40 UTC,,18844115,4667,false,10233,89115336,37,Shouldn't this be a compile time dependency?,556565151,2016-11-22 13:33:50 UTC
